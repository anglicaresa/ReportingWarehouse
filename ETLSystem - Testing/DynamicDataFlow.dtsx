<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/8/2017 3:47:42 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W7PC01XQ1T"
  DTS:CreatorName="ANGLICARE-SA\jshen"
  DTS:DTSID="{FA3890F4-B4AE-4ABF-A17F-F2A49052282D}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.92"
  DTS:LocaleID="3081"
  DTS:ObjectName="DynamicDataFlow"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="10"
  DTS:VersionGUID="{F9A8B075-34E5-4BF5-912D-1468E9CDF76A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Component Programmatically  -- read data from source table and input into destination table"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{B2D42E45-A901-4E7D-886F-814106E46058}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Component Programmatically  -- read data from source table and input into destination table"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_fb6564dc802d4d1bbb05a62527b901ed"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;  //new imported
using System.Collections.Generic;
using System.Linq;
using System.Text;
#endregion

//create table for testing

//CREATE TABLE[HumanResources].[Department](
//[DepartmentID]
//[smallint]
//NOT NULL,
//[Name] [nvarchar](50) NOT NULL,
//[GroupName] [nvarchar](50) NOT NULL,
//[ModifiedDate] [datetime]
//NOT NULL
//) ON[PRIMARY]

namespace ST_fb6564dc802d4d1bbb05a62527b901ed
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here

            //Creating the package
            Package pkg = new Package();
            //Add a Data Flow Task
            Executable exe = pkg.Executables.Add("STOCK:PipelineTask");
            TaskHost hostDft = (TaskHost)exe;
            hostDft.Name = "DFT - Transfer Departments";
            MainPipe dft = (hostDft).InnerObject as MainPipe;
            //Create Source OLE DB Connection Manager
            ConnectionManager cnSource = pkg.Connections.
            Add("OLEDB");
            cnSource.Name = "OLE DB Source ConnectionManager";
            cnSource.ConnectionString = string.Format(
            //"Provider=SQLOLEDB.1;Data Source={0};InitialCatalog ={1}; Integrated Security = SSPI; ", "DEVSQL-1\\WHOUSE", "dwhb");
            "Provider=SQLOLEDB.1;Data Source={0};InitialCatalog ={1}; Persist Security Info=True;;Connection Timeout=36000;User ID=asadwh;Password=asadwh201601;", "DEVSQL-1\\WHOUSE", "dwhb");
            //Create Destination OLE DB Connection Manager
            ConnectionManager cnDestination = pkg.Connections.
            Add("OLEDB");
            cnDestination.Name = "OLEDB DestinationConnectionManager";cnDestination.ConnectionString = string.Format("Provider=SQLOLEDB.1;Data Source={0};InitialCatalog ={1}; Persist Security Info=True;;Connection Timeout=36000;User ID=asadwh;Password=asadwh201601;", "DEVSQL-1\\WHOUSE", "dwhf");
            //Add OLE DB Source
            IDTSComponentMetaData100 component =
            dft.ComponentMetaDataCollection.New();
            component.Name = "OLEDBSource";
            component.ComponentClassID = "DTSAdapter.OleDbSource.3";
            //Instanciate and Initialize
            CManagedComponentWrapper instance = component.Instantiate();
            instance.ProvideComponentProperties();
            //Assign Connection Manager to Component
            component.RuntimeConnectionCollection[0].
            ConnectionManager =
            DtsConvert.GetExtendedInterface(pkg.Connections[0]);
            component.RuntimeConnectionCollection[0].
            ConnectionManagerID =
            pkg.Connections[0].ID;


            //Set other properties
            instance.SetComponentProperty("AccessMode", 2);
            instance.SetComponentProperty("SqlCommand",
            "SELECT * FROM conform.ssistest");
            //Reinitialize source
            instance.AcquireConnections(null);
            instance.ReinitializeMetaData();
            instance.ReleaseConnections();
            //Add OLE DB Destination
            IDTSComponentMetaData100 destination =
            dft.ComponentMetaDataCollection.New();
            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
            destination.Name = "OLEDBDestination";
            //Instantiate Destination Component
            CManagedComponentWrapper destInstance = destination.
            Instantiate();
            destInstance.ProvideComponentProperties();
            //Assign Destination Connection
            destination.RuntimeConnectionCollection[0].
            ConnectionManager =
            DtsConvert.GetExtendedInterface(pkg.Connections[1]);
            destination.RuntimeConnectionCollection[0].
            ConnectionManagerID =
            pkg.Connections[1].ID;
            //Set destination properties
            destInstance.SetComponentProperty("OpenRowset",
            "hris.ssistest");
            destInstance.SetComponentProperty("AccessMode", 3);
            destInstance.SetComponentProperty("FastLoadOptions",
            "TABLOCK,CHECK_CONSTRAINTS");


            //Connect source to destination
            dft.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0],destination.InputCollection[0]);
            //Reinitialize destination
            destInstance.AcquireConnections(null);
            destInstance.ReinitializeMetaData();
            destInstance.ReleaseConnections();

            //Map input columns with virtual input columns
            IDTSInput100 input = destination.InputCollection[0];
            IDTSVirtualInput100 vInput = input.GetVirtualInput();
            foreach (IDTSVirtualInputColumn100 vColumn in vInput.
            VirtualInputColumnCollection)
            {
                // Select column, and retain new input column
                IDTSInputColumn100 inputColumn = destInstance.
                SetUsageType(input.ID,
                vInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                // Find external column by name
                IDTSExternalMetadataColumn100 externalColumn =
                input.ExternalMetadataColumnCollection[inputColumn.Name];
                // Map input column to external column
                destInstance.MapInputColumn(input.ID, inputColumn.
                ID, externalColumn.ID);
            }
            //Execute Package
          //  DTSExecResult result = pkg.Execute();
          //  Console.WriteLine(result.ToString());




            //----------------------------------------

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_fb6564dc802d4d1bbb05a62527b901ed.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{EA72A577-89C0-44D3-8317-738B98E6586C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_fb6564dc802d4d1bbb05a62527b901ed</RootNamespace>
    <AssemblyName>ST_fb6564dc802d4d1bbb05a62527b901ed</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.SQLServer.DTSPipelineWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Windows\assembly\GAC_MSIL\Microsoft.SqlServer.DTSPipelineWrap\10.0.0.0__89845dcd8080cc91\Microsoft.SQLServer.DTSPipelineWrap.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SQLServer.DTSRuntimeWrap.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SQLServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Tasks\Microsoft.SqlServer.ScriptTask.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_fb6564dc802d4d1bbb05a62527b901ed</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_fb6564dc802d4d1bbb05a62527b901ed</msb:DisplayName>
		<msb:ProjectId>{32465965-50AA-4135-B3A0-54BA61C46987}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_fb6564dc802d4d1bbb05a62527b901ed.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Settings.get_Default():ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Sett" +
    "ings")]

namespace ST_fb6564dc802d4d1bbb05a62527b901ed.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_fb6564dc802d4d1bbb05a62527b901ed")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Anglicare-SA")]
[assembly: AssemblyProduct("ST_fb6564dc802d4d1bbb05a62527b901ed")]
[assembly: AssemblyCopyright("Copyright @ Anglicare-SA 2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_fb6564dc802d4d1bbb05a62527b901ed.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_fb6564dc802d4d1bbb05a62527b901ed.dll">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
ACAAAAAAACAAAAAAACAAAAAAASABAD0DACAAAAAAASABAM0JACAAAAAAASABAPAMACAAAAAAACAA
AAAABQAoAAcAQAAIAIUACQBAAAsAQAAMAIUADQBAAA4AhQAPAEAAEgBAABMAhQAUAEAAFQCFABYA
RAAXAEAAGACFABkAQAAaAEAAGwCFABwAWAAJAKIKAQARAKIKBgAZAKIKCgApAKIKEAAxAKIKEAA5
AKIKEABBAKIKEABJAKIKEABRAKIKEABZAKIKEABhAKIKEABpAKIKBgCZAKIKBgDBAKIKFQDRAKIK
BgDhAKIKGwDpAKIKEADxAKIKBgDxAKIKIQD5AKIKAQABAaIKEAB5AKIKBgB5AK4LQgARAfwDSAAp
AaEEEAAhAVkMTwB5AP4LUwAxAfwDWQA5AaEEEABBAVIMYAA5AboHEAAxAWcIZwBRASQEbgA5AbkC
dgCBAJwMTwCBAOMMegCJAHMFBgBxADwMfgBZAY0MAQBxAKIKBgChAKIKBgDZAIYEhADZAPYMjACp
AKIKkgDJAKIKBgAIABQArAAIABgAsQAIABwAtgAIACQArAAIACgAsQApAHMAqQIuAAsAgQIuABMA
igIuABsAqQIuACMAsgIuACsA2wIuADMA2wIuADsA4QIuAEMAsgIuAEsA8wIuAFMA2wIuAFsAFgND
AGMAsQBJAHMAqQJhAHsAsQBjAGsAsQCJAKMAYAOjAHsAsQCjAIMACwSjAIsAawSjAJMAsQCpAKMA
aQPDAHsAsQDDAJsAlQTJAKMAcgPjAHsAsQDjAIsA9QTjAJMAsQDpAKMAewMDAXsAsQADAasAHwUD
AYsAKQUDAZMAsQAJAaMAjQMjAXsAsQAjAYsAUwUjAZMAsQApAaMAnwNDAXsAsQBDAYsAawRDAZMA
sQBJAaMA3gNgAaMAYANjAXsAsQBjAYsAfQVjAZMAsQBpAaMAnwOAAaMAYAODAXsAsQCDAasAHwWD
AYsApwWDAZMAsQCJAaMA8AOjAXsAsQCjAYsA0QWjAZMAsQCpAaMA3gPAAaMAaQPDAXsAsQDDAasA
HwXDAYsA+wXDAZMAsQDJAaMAnwPgAaMAaQPjAXsAsQDjAYsAJQbjAZMAsQDpAaMAYAMAAqMAcgMD
AnsAsQADAosATwYDApMAsQAJAqMA3gMgAqMAewMjAnsAsQAjAosAeQYjApMAsQApAqMAqANAAqMA
hANDAnsAsQBDAosAowZDApMAsQBJAqMAYANjAnsAsQBjAqsAHwVjAosAzQZjApMAsQBpAqMAaQOA
AqMAjQODAnsAsQCDAosA9waDApMAsQCJAqMAcgOjAnsAsQCjAosAIQejAqsAHwWjApMAsQCpAqMA
3gPAAqMAlgPDAnsAsQDDAosASwfDApMAsQDJAqMAaQPgAqMAnwPjAnsAsQDjAosAdQfjApMAsQDp
AqMA+QMAA6MAqAMDA3sAsQADA6sAHwUDA4sAnwcDA5MAsQAjA3sAsQAjA4sAyQcjA5MAsQBAA6MA
sQNDA3sAsQBDA4sA8wdDA5MAsQBgA6MAugNjA3sAsQBjA6sAHwVjA4sAHQhjA5MAsQCDA3sAsQCD
A4sASweDA4MACwSDA5MAsQCgA6MAwwOjA3sAsQCjA4sARwijA5MAsQDAA6MAzAMABKMA1QMgBKMA
nwNABKMAnwNgBKMA3gOABKMAnwOgBKMAnwPgBKMA5wMgBaMA8ANABaMA3gNgBaMAnwOABaMAnwPA
BaMAYAPgBaMAYAMABqMA3gNABqMAhAOABqMAlgPABqMAqAPgBqMAYAMgB6MAaQNAB6MAaQNgB6MA
cgOAB6MAcgOgB6MA3gPgB6MAaQMgCKMA+QNgCKMAAgQFALsABwC7AAkAuwALALsADQC9AA8AvQAR
AL0AEwC9ABUAvQAXAL0AGwC9ACEAvQAjALsAJQC/ACcAwQApAL0AMwC9ADUAvwA5AL0AOwC9AD0A
vQA/AL8AQwC7AEUAuwBHAL0ASQC/AEsAvQBNAL0ATwC9AFEAvQBTAL0AVQC7AFcAuwBZAL0AWwC9
AF0AvQBfAL8AYQC9AGMAwwAnAAMAAQAEAAMABwAEAAsACQAMAAoADQALAA4ADQAPAA4AEwAQABYA
EQAXABMAGAAVABkAFgAaABcAAAC9CSoCAAA3BS8CAACFDDQCAAC8BDkCAACEAzkCAACICT0CAACc
CUICAABoCUcCAACbA0wCAABrCFACAACbA0wCAAAiCVYCAABrCFsCAACbA0wCAAC8BDkCAABrCGEC
AADvCGcCAAAPCWwCAABCAzkCAAD/CXECAABrCHYCAABHCXwCAADWAkwCAgAEAAMAAgAFAAUAAQAG
AAUAAgAHAAcAAgALAAkAAQAMAAkAAgAOAAsAAQAPAAsAAgAQAA0AAgARAA8AAgAUABEAAgAhABMA
AQAiABMAAgAjABUAAgAkABcAAQAlABcAAgApABkAAgAqABsAAgArAB0AAQAsAB0AAgAuAB8AAQAv
AB8AAgAwACEAAgA2ACMAAgA3ACUAAgA5ACcAAQA6ACcAAgA7ACkAAQA8ACkAAgA9ACsAAgA/AC0A
AgBBAC8ABIAAAAEAAADcGTpxAAAAAAAAAAQAAAQAAAAAAAAAAAAAAJoA8wMAAAAADQAAAAAAAAAA
AAAAowDPBwAAAAAKAAAAAAAAAAAAAACjAKsDAAAAAAQAAAAAAAAAAAAAAJoAcAgAAAAAAAAAAAEA
AAASCwAAHgACAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTUGlwZWxpbmUxMDAASURU
U1BhdGgxMDAASURUU09iamVjdE1vZGVsMTAwAElEVFNFeHRlcm5hbE1ldGFkYXRhQ29sdW1uMTAw
AElEVFNJbnB1dENvbHVtbjEwMABJRFRTVmlydHVhbElucHV0Q29sdW1uMTAwAElEVFNDb21wb25l
bnRNZXRhRGF0YUNvbGxlY3Rpb24xMDAASURUU1BhdGhDb2xsZWN0aW9uMTAwAElEVFNFeHRlcm5h
bE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbjEwMABJRFRTVmlydHVhbElucHV0Q29sdW1uQ29sbGVj
dGlvbjEwMABJRFRTUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uMTAwAElEVFNJbnB1dENvbGxl
Y3Rpb24xMDAASURUU091dHB1dENvbGxlY3Rpb24xMDAASURUU1J1bnRpbWVDb25uZWN0aW9uMTAw
AElEVFNDb25uZWN0aW9uTWFuYWdlcjEwMABJRFRTT2JqZWN0MTAwAElEVFNEZXNpZ250aW1lQ29t
cG9uZW50MTAwAElEVFNJbnB1dDEwMABJRFRTVmlydHVhbElucHV0MTAwAElEVFNPdXRwdXQxMDAA
SURUU0N1c3RvbVByb3BlcnR5MTAwAF9WdGJsR2FwMV8xMABfVnRibEdhcDFfMQBfVnRibEdhcDNf
MQBfVnRibEdhcDFfMTIAX1Z0YmxHYXAyXzEyAEludDMyAF9WdGJsR2FwMV8yAF9WdGJsR2FwMl8y
AF9WdGJsR2FwM18yAF9WdGJsR2FwMV8xMwBfVnRibEdhcDFfMwBfVnRibEdhcDFfNABfVnRibEdh
cDFfOAA8TW9kdWxlPgBVVF9JR05PUkVEAGdldF9JRABzZXRfSUQAZ2V0X0xpbmVhZ2VJRABsTGlu
ZWFnZUlEAGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQAbElucHV0Q29sdW1uSUQAcElEAGdldF9D
b25uZWN0aW9uTWFuYWdlcklEAHNldF9Db25uZWN0aW9uTWFuYWdlcklEAHBic3RyQ29ubmVjdGlv
bk1hbmFnZXJJRABnZXRfQ29tcG9uZW50Q2xhc3NJRABzZXRfQ29tcG9uZW50Q2xhc3NJRABic3Ry
Q29tcG9uZW50Q2xhc3NJRABsSW5wdXRJRABVVF9SRUFEV1JJVEUATWljcm9zb2Z0LlNxbFNlcnZl
ci5NYW5hZ2VkRFRTAFVUX1JFQURPTkxZAHZhbHVlX18AUmVpbml0aWFsaXplTWV0YURhdGEAbXNj
b3JsaWIAQWRkAFNUX2ZiNjU2NGRjODAyZDRkMWJiYjA1YTYyNTI3YjkwMWVkAEdldEV4dGVuZGVk
SW50ZXJmYWNlAGRlZmF1bHRJbnN0YW5jZQBQYWNrYWdlAElFbnVtZXJhYmxlAElEaXNwb3NhYmxl
AEV4ZWN1dGFibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X05hbWUA
c2V0X05hbWUAcGJzdHJOYW1lAFByb3BlcnR5TmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5S
dW50aW1lAE1haW5QaXBlAERUU1VzYWdlVHlwZQBlVXNhZ2VUeXBlAFNldFVzYWdlVHlwZQBGYWls
dXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRP
YmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBJbnN0YW50aWF0
ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEaXNwSWRBdHRyaWJ1dGUAQ29tcGlsZXJHZW5lcmF0ZWRB
dHRyaWJ1dGUAR3VpZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVn
Z2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRy
aWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRl
AEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmli
dXRlAERlZmF1bHRNZW1iZXJBdHRyaWJ1dGUAVHlwZUlkZW50aWZpZXJBdHRyaWJ1dGUAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBDb0NsYXNzQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5
UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmls
aXR5QXR0cmlidXRlAHZWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAHNldF9D
b25uZWN0aW9uU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5D
b21wb25lbnRNb2RlbABTVF9mYjY1NjRkYzgwMmQ0ZDFiYmIwNWE2MjUyN2I5MDFlZC5kbGwAZ2V0
X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBNYXBJbnB1dENvbHVtbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBwVHJhbnNhY3Rpb24AU3lz
dGVtLlJlZmxlY3Rpb24AZ2V0X0NvbXBvbmVudE1ldGFEYXRhQ29sbGVjdGlvbgBnZXRfUGF0aENv
bGxlY3Rpb24AZ2V0X0V4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uAGdldF9WaXJ0dWFs
SW5wdXRDb2x1bW5Db2xsZWN0aW9uAGdldF9SdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24AZ2V0
X0lucHV0Q29sbGVjdGlvbgBnZXRfT3V0cHV0Q29sbGVjdGlvbgBDdWx0dXJlSW5mbwBnZXRfUmVz
b3VyY2VNYW5hZ2VyAHBwSURUU0Nvbm5lY3Rpb25NYW5hZ2VyAGdldF9Db25uZWN0aW9uTWFuYWdl
cgBzZXRfQ29ubmVjdGlvbk1hbmFnZXIARHRzQ29udGFpbmVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUuV3JhcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFw
cGVyAENNYW5hZ2VkQ29tcG9uZW50V3JhcHBlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZp
Y2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9m
YjY1NjRkYzgwMmQ0ZDFiYmIwNWE2MjUyN2I5MDFlZC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNv
dXJjZXMARGVidWdnaW5nTW9kZXMAU1RfZmI2NTY0ZGM4MDJkNGQxYmJiMDVhNjI1MjdiOTAxZWQu
UHJvcGVydGllcwBQcm92aWRlQ29tcG9uZW50UHJvcGVydGllcwBnZXRfRXhlY3V0YWJsZXMAU2V0
dGluZ3MAQXR0YWNoUGF0aEFuZFByb3BhZ2F0ZU5vdGlmaWNhdGlvbnMAU3lzdGVtLkNvbGxlY3Rp
b25zAGdldF9Db25uZWN0aW9ucwBBY3F1aXJlQ29ubmVjdGlvbnMAUmVsZWFzZUNvbm5lY3Rpb25z
AFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAEZvcm1hdABnZXRfSW5uZXJPYmplY3QAcElE
VFNWaXJ0dWFsSW5wdXRPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAZ2V0X0N1cnJl
bnQARHRzQ29udmVydABUYXNrSG9zdABwSURUU0lucHV0AEdldFZpcnR1YWxJbnB1dABwSURUU091
dHB1dABNb3ZlTmV4dABOZXcASW5kZXgAZ2V0X0Fzc2VtYmx5AFNldENvbXBvbmVudFByb3BlcnR5
AAAlUwBUAE8AQwBLADoAUABpAHAAZQBsAGkAbgBlAFQAYQBzAGsAADVEAEYAVAAgAC0AIABUAHIA
YQBuAHMAZgBlAHIAIABEAGUAcABhAHIAdABtAGUAbgB0AHMAAQtPAEwARQBEAEIAAD9PAEwARQAg
AEQAQgAgAFMAbwB1AHIAYwBlACAAQwBvAG4AbgBlAGMAdABpAG8AbgBNAGEAbgBhAGcAZQByAACB
J1AAcgBvAHYAaQBkAGUAcgA9AFMAUQBMAE8ATABFAEQAQgAuADEAOwBEAGEAdABhACAAUwBvAHUA
cgBjAGUAPQB7ADAAfQA7AEkAbgBpAHQAaQBhAGwAQwBhAHQAYQBsAG8AZwAgAD0AewAxAH0AOwAg
AFAAZQByAHMAaQBzAHQAIABTAGUAYwB1AHIAaQB0AHkAIABJAG4AZgBvAD0AVAByAHUAZQA7ADsA
QwBvAG4AbgBlAGMAdABpAG8AbgAgAFQAaQBtAGUAbwB1AHQAPQAzADYAMAAwADAAOwBVAHMAZQBy
ACAASQBEAD0AYQBzAGEAZAB3AGgAOwBQAGEAcwBzAHcAbwByAGQAPQBhAHMAYQBkAHcAaAAyADAA
MQA2ADAAMQA7AAAfRABFAFYAUwBRAEwALQAxAFwAVwBIAE8AVQBTAEUAAQlkAHcAaABiAABFTwBM
AEUARABCACAARABlAHMAdABpAG4AYQB0AGkAbwBuAEMAbwBuAG4AZQBjAHQAaQBvAG4ATQBhAG4A
YQBnAGUAcgAACWQAdwBoAGYAABdPAEwARQBEAEIAUwBvAHUAcgBjAGUAADFEAFQAUwBBAGQAYQBw
AHQAZQByAC4ATwBsAGUARABiAFMAbwB1AHIAYwBlAC4AMwAAFUEAYwBjAGUAcwBzAE0AbwBkAGUA
ABVTAHEAbABDAG8AbQBtAGEAbgBkAAA9UwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAGMAbwBu
AGYAbwByAG0ALgBzAHMAaQBzAHQAZQBzAHQAADdEAFQAUwBBAGQAYQBwAHQAZQByAC4ATwBsAGUA
RABiAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAAIU8ATABFAEQAQgBEAGUAcwB0AGkAbgBhAHQAaQBv
AG4AABVPAHAAZQBuAFIAbwB3AHMAZQB0AAAbaAByAGkAcwAuAHMAcwBpAHMAdABlAHMAdAAAH0YA
YQBzAHQATABvAGEAZABPAHAAdABpAG8AbgBzAAAzVABBAEIATABPAEMASwAsAEMASABFAEMASwBf
AEMATwBOAFMAVABSAEEASQBOAFQAUwAAcVMAVABfAGYAYgA2ADUANgA0AGQAYwA4ADAAMgBkADQA
ZAAxAGIAYgBiADAANQBhADYAMgA1ADIANwBiADkAMAAxAGUAZAAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAADCQhyOJh5VR57ZEqnqQy0dAAQgAQEIAyAAAQUgAQER
EQQgAQEOBSABARFdBSABARJtBSACAQ4OGgcMEj0ScBIcEhwSFBI0EmQSQRJoEjwSLBJFBSAAEoCJ
BiABEoCNDgMgABwFIAASgJkGIAESgJ0OBgADDg4cHAYgARKAnRwHAAESdBKAnQMgAA4DIAACBSAA
EoCtBwABEm0RgLEFIAASgLUHIAIBDhKAtQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAEAgAA
AAETARwBGwEZgKssAACApVN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DdXN0b21NYXJz
aGFsZXJzLkVudW1lcmF0b3JUb0VudW1WYXJpYW50TWFyc2hhbGVyLCBDdXN0b21NYXJzaGFsZXJz
LCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVm
N2YxMWQ1MGEzYQADBhJVAwYSWQMGEhACBggDBhEYAwYReAQAABJVBAAAElkFAAEBElkEAAASEAMA
AAEEIAASOAQgABJMBCAAEhQEIAASYAQgABIcCiAEEjwIEmQIERgGIAISJA4cBCABARwHIAMSLAgI
CAMgAAgFIAESLBwEIAASZAQgABIwBSABEjQcBSABEkgcByACARJIEjQEIAASUAQgABIgBCAAElQE
IAASdAUgAQESdAUgARJcHAQgABJsBCAAEkEECAASVQQIABJZBAgAEhADCAAOBAgAEjgECAASTAQI
ABJgAwgACAUIARIsHAQIABIwBQgBEjQcBQgBEkgcBAgAEiAECAASVAQIABJ0BQgBElwcBAgAEmwI
AQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2Zi
NjU2NGRjODAyZDRkMWJiYjA1YTYyNTI3YjkwMWVkAAAFAQAAAAARAQAMQW5nbGljYXJlLVNBAAAi
AQAdQ29weXJpZ2h0IEAgQW5nbGljYXJlLVNBIDIwMTcAAEkBABouTkVURnJhbWV3b3JrLFZlcnNp
b249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41CAEADQAA
AAAACAEAZQAAAAAACAEAZgAAAAAACAEAZwAAAAAACAEAaAAAAAAACAEAcgAAAAAACAEADgAAAAAA
CAEACwAAAAAACAEADAAAAAAACAEAEAAAAAAACAEAEQAAAAAACAEAHgAAAAAACAEAHwAAAAAACAEA
IQAAAAAACAEAAAAAAAAACAEAaQAAAAAACAEAdAAAAAAACAEAbAAAAAAACAEA/P///wAAXwEAWlN5
c3RlbS5PYmplY3QsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQAAKQEAJEIxMzA5N0U1LTQ0NjUtNEE5Qy1C
Qjc0LUZGQzhGOEUzMDc2MAAAXwEAJDZlOTQ0ZWEyLTE0YTAtNDk5Ny05OGZhLTNlMTk5NWQ4MGJk
OTVNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyLkRUU1VzYWdlVHlwZQAA
KQEAJEEzN0FFRTAzLTc0OTAtNDBCNi05RUFBLUJERUI2QThBOEI3RAAACQEABEl0ZW0AACkBACQ0
RUNBNkM5MS01MUU0LTQ0NTUtQTJBNC0wN0VCRDgxQUFFNTgAACkBACQ3RDRGMkZBQS0xRjBCLTRF
NTctOUYxNS1GQzU1RTI4MjhFOUUAACkBACRCREQ2RDI5NS1FM0RFLTQ1NUItQkI1Ni1EMTFCOUI0
QkY0QjMAACkBACRFNDcyQjZBRS0yMDJDLTRDNjctOEY0NC03RDdFRTM4MDdBNDQAACkBACQyNEM2
NDEyOS03MzE3LTRFMkYtQUFGMi04MDk2NDc5NkUzQUUAACkBACREOTVFQzlCOC1GNkI0LTQ5MTIt
QUIzOS05RDZBRkVGNjJDMEUAACkBACRFNTgyNjkxNy1ENzU2LTQ1ODAtQjI1RS0xNTI1QjcyNTNE
RUUAACkBACQzMEU1RDBFRi1FMzNELTQ5NDUtOEE3Ri1GNTE3OEZDNjRDMjQAACkBACQ5MEIyOTdD
Ri03NTIwLTRBN0QtQTIwRS02OTMzMTFBMjA2NDEAACkBACQyRDE1MDhEMS05OTk4LTQ5NjgtQjYw
OC1ENTI3Q0JFQTk5RUUAACkBACQxRUVGODM4NC0wRkZDLTQ0QjgtODc3Qi1GMjQ2ODgwRUM2Q0YA
ACkBACQxNzIwNjZEQy0yNEVFLTQ1NjktQjIyNC0xN0E0NTcyNDk4NzYAACkBACQ3Q0JEODY0OS0x
RkUxLTQ3RTMtOTgyQS1GRUVGQkFDNjkzOTAAACkBACQ4OUNFQkE4Ni1FQzUxLTRDNjItQTJEMy1F
OUFBNEZDMjg5MDAAACkBACRDQzM1OTI0Mi0xRDIyLTRCNUQtOEMyMC1GQUI3NjQxNzQ2NzYAACkB
ACQyOTc0QTM0NC01QjVDLTQ5NDctODk2RC02QkRCRjIwMDJGMTkAACkBACQ4NkZDOTYyOS03NjlB
LTQ3OUUtODJFRC1DNkZENzVDMkZDOEUAACkBACQzNzlBRDNDQy1BMDk4LTQwQjQtOUY1NC1CQ0Ux
QjExMTZBMkYAACkBACRBREI5NTI2Mi1FNUZDLTQxRjgtODlFMi1CQUNEODIwMENBRjIAACkBACRF
NkU0NkI3QS02NDI0LTQxQzItQjY1OC0zODcyMjFEQjc0RUQAAAAAALQAAADOyu++AQAAAJEAAABs
U3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAu
MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3Rl
bS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAgTwAA
AAAAAAAAAAA6TwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALE8AAAAAAAAAAAAAAABfQ29yRGxs
TWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAA
AAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAASgQAAAAA
AAAAAAAASgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAB
ADpx3BkAAAEAOnHcGT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBKoDAAAB
AFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAIYDAAABADAAMAAwADAAMAA0AGIAMAAAABoA
AQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA6AA0AAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAA
AEEAbgBnAGwAaQBjAGEAcgBlAC0AUwBBAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBUAF8AZgBiADYANQA2ADQAZABjADgAMAAyAGQANABkADEAYgBiAGIAMAA1
AGEANgAyADUAMgA3AGIAOQAwADEAZQBkAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADYANgAyADAALgAyADgAOQA4ADYAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AZgBiADYANQA2ADQAZABjADgAMAAyAGQANABkADEAYgBiAGIAMAA1AGEA
NgAyADUAMgA3AGIAOQAwADEAZQBkAC4AZABsAGwAAABgAB4AAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABBAG4AZwBsAGkAYwBhAHIAZQAtAFMA
QQAgADIAMAAxADcAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAA
AHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBmAGIANgA1ADYA
NABkAGMAOAAwADIAZAA0AGQAMQBiAGIAYgAwADUAYQA2ADIANQAyADcAYgA5ADAAMQBlAGQALgBk
AGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AZgBiADYANQA2ADQA
ZABjADgAMAAyAGQANABkADEAYgBiAGIAMAA1AGEANgAyADUAMgA3AGIAOQAwADEAZQBkAAAAQgAP
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADYAMgAwAC4AMgA4ADkA
OAA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2
ADYAMgAwAC4AMgA4ADkAOAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAEw/AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="569,42"
          Id="Package\Data Flow Component Programmatically  -- read data from source table and input into destination table"
          TopLeft="132,263" />
        <AnnotationLayout
          Text="Purpose: this code is to test dynamicly builiding data flow ETLs not using actual data source and data destination componet&#xA;which can help create ETL bulkly and quickly especially there are multiple similar data process flow&#xA;example: reading csv files and loading them into data warehouse tables&#xA;Refer book: Packt.Microsoft SQL Server 2012 Integration Services.... SSIS programming"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="684,90"
          Id="4c425d11-2d3d-417d-8486-dd8d23fc4c4f"
          TopLeft="607,46" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>