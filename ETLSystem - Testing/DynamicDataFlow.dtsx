<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/8/2017 3:47:42 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W7PC01XQ1T"
  DTS:CreatorName="ANGLICARE-SA\jshen"
  DTS:DTSID="{FA3890F4-B4AE-4ABF-A17F-F2A49052282D}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2164.0"
  DTS:LocaleID="3081"
  DTS:ObjectName="DynamicDataFlow"
  DTS:PackageType="5"
  DTS:VersionBuild="3"
  DTS:VersionGUID="{5C9607C3-FB21-4DD0-B5FE-8F963ED64BC3}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Component Programmatically  -- read data from source table and input into destination table"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{B2D42E45-A901-4E7D-886F-814106E46058}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Component Programmatically  -- read data from source table and input into destination table"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_fb6564dc802d4d1bbb05a62527b901ed"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Settings.get_Default():ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Sett" +
    "ings")]

namespace ST_fb6564dc802d4d1bbb05a62527b901ed.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;  //new imported
using System.Collections.Generic;
using System.Linq;
using System.Text;
#endregion

//create table for testing

//CREATE TABLE[HumanResources].[Department](
//[DepartmentID]
//[smallint]
//NOT NULL,
//[Name] [nvarchar](50) NOT NULL,
//[GroupName] [nvarchar](50) NOT NULL,
//[ModifiedDate] [datetime]
//NOT NULL
//) ON[PRIMARY]

namespace ST_fb6564dc802d4d1bbb05a62527b901ed
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here

            //Creating the package
            Package pkg = new Package();
            //Add a Data Flow Task
            Executable exe = pkg.Executables.Add("STOCK:PipelineTask");
            TaskHost hostDft = (TaskHost)exe;
            hostDft.Name = "DFT - Transfer Departments";
            MainPipe dft = (hostDft).InnerObject as MainPipe;
            //Create Source OLE DB Connection Manager
            ConnectionManager cnSource = pkg.Connections.
            Add("OLEDB");
            cnSource.Name = "OLE DB Source ConnectionManager";
            cnSource.ConnectionString = string.Format(
            "Provider=SQLOLEDB.1;Data Source={0};InitialCatalog ={ 1}; Integrated Security = SSPI; ",".","AdventureWorks2012");
            //Create Destination OLE DB Connection Manager
            ConnectionManager cnDestination = pkg.Connections.
            Add("OLEDB");
            cnDestination.Name = "OLEDB DestinationConnectionManager";cnDestination.ConnectionString = string.Format("Provider=SQLOLEDB.1;Data Source={0};InitialCatalog ={ 1}; Integrated Security = SSPI; ",".","PacktPub_SSISbook");
            //Add OLE DB Source
            IDTSComponentMetaData100 component =
            dft.ComponentMetaDataCollection.New();
            component.Name = "OLEDBSource";
            component.ComponentClassID = "DTSAdapter.OleDbSource.3";
            //Instanciate and Initialize
            CManagedComponentWrapper instance = component.Instantiate();
            instance.ProvideComponentProperties();
            //Assign Connection Manager to Component
            component.RuntimeConnectionCollection[0].
            ConnectionManager =
            DtsConvert.GetExtendedInterface(pkg.Connections[0]);
            component.RuntimeConnectionCollection[0].
            ConnectionManagerID =
            pkg.Connections[0].ID;


            //Set other properties
            instance.SetComponentProperty("AccessMode", 2);
            instance.SetComponentProperty("SqlCommand",
            "SELECT * FROM HumanResources.Department");
            //Reinitialize source
            instance.AcquireConnections(null);
            instance.ReinitializeMetaData();
            instance.ReleaseConnections();
            //Add OLE DB Destination
            IDTSComponentMetaData100 destination =
            dft.ComponentMetaDataCollection.New();
            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
            destination.Name = "OLEDBDestination";
            //Instantiate Destination Component
            CManagedComponentWrapper destInstance = destination.
            Instantiate();
            destInstance.ProvideComponentProperties();
            //Assign Destination Connection
            destination.RuntimeConnectionCollection[0].
            ConnectionManager =
            DtsConvert.GetExtendedInterface(pkg.Connections[1]);
            destination.RuntimeConnectionCollection[0].
            ConnectionManagerID =
            pkg.Connections[1].ID;
            //Set destination properties
            destInstance.SetComponentProperty("OpenRowset",
            "HumanResources.Department");
            destInstance.SetComponentProperty("AccessMode", 3);
            destInstance.SetComponentProperty("FastLoadOptions",
            "TABLOCK,CHECK_CONSTRAINTS");


            //Connect source to destination
            dft.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0],destination.InputCollection[0]);
            //Reinitialize destination
            destInstance.AcquireConnections(null);
            destInstance.ReinitializeMetaData();
            destInstance.ReleaseConnections();

            //Map input columns with virtual input columns
            IDTSInput100 input = destination.InputCollection[0];
            IDTSVirtualInput100 vInput = input.GetVirtualInput();
            foreach (IDTSVirtualInputColumn100 vColumn in vInput.
            VirtualInputColumnCollection)
            {
                // Select column, and retain new input column
                IDTSInputColumn100 inputColumn = destInstance.
                SetUsageType(input.ID,
                vInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                // Find external column by name
                IDTSExternalMetadataColumn100 externalColumn =
                input.ExternalMetadataColumnCollection[inputColumn.Name];
                // Map input column to external column
                destInstance.MapInputColumn(input.ID, inputColumn.
                ID, externalColumn.ID);
            }
            //Execute Package
            DTSExecResult result = pkg.Execute();
          //  Console.WriteLine(result.ToString());




            //----------------------------------------

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_fb6564dc802d4d1bbb05a62527b901ed.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{EA72A577-89C0-44D3-8317-738B98E6586C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_fb6564dc802d4d1bbb05a62527b901ed</RootNamespace>
    <AssemblyName>ST_fb6564dc802d4d1bbb05a62527b901ed</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.SQLServer.DTSPipelineWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Windows\assembly\GAC_MSIL\Microsoft.SqlServer.DTSPipelineWrap\10.0.0.0__89845dcd8080cc91\Microsoft.SQLServer.DTSPipelineWrap.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SQLServer.DTSRuntimeWrap.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SQLServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_fb6564dc802d4d1bbb05a62527b901ed</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_fb6564dc802d4d1bbb05a62527b901ed</msb:DisplayName>
		<msb:ProjectId>{32465965-50AA-4135-B3A0-54BA61C46987}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_fb6564dc802d4d1bbb05a62527b901ed.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_fb6564dc802d4d1bbb05a62527b901ed")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Anglicare-SA")]
[assembly: AssemblyProduct("ST_fb6564dc802d4d1bbb05a62527b901ed")]
[assembly: AssemblyCopyright("Copyright @ Anglicare-SA 2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_fb6564dc802d4d1bbb05a62527b901ed.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_fb6564dc802d4d1bbb05a62527b901ed.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_fb6564dc802d4d1bbb05a62527b901ed.dll">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
7QwBIAIA0gwAIAAAAAAAIAAAAAAAIAAAAAAAIAAAAAABIAEAPQMAIAAAAAABIAEA1QkAIAAAAAAB
IAEABg0AIAAAAAAAIAAAAAAFACgABwBAAAgAhQAJAEAACwBAAAwAhQANAEAADgCFAA8AQAASAEAA
EwCFABQAQAAVAIUAFgBEABcAQAAYAIUAGQBAABoAQAAbAIUAHABYAAkAqgoBABEAqgoGABkAqgoK
ACkAqgoQADEAqgoQADkAqgoQAEEAqgoQAEkAqgoQAFEAqgoQAFkAqgoQAGEAqgoQAGkAqgoGAJkA
qgoGAMEAqgoVANEAqgoGAOEAqgobAOkAqgoQAPEAqgoGAPEAqgohAPkAqgoBAAEBqgoQAHkAqgoG
AHkAtgtCABEB/ANIACkBoQQQACEBYQxPAHkABgxTADEB/ANZADkBoQQQAEEBWgxgADkBwgcQADEB
bwhnAFEBJARuADkBuQJ2AIEAsgxPAIEA+Qx6AIkAcwUGAHkAkwd+AHEARAyEAGEBowwBAHEAqgoG
AKEAqgoGANkAhgSKANkADA2SAKkAqgqYAMkAqgoGAAgAFACyAAgAGAC3AAgAHAC8AAgAJACyAAgA
KAC3ACkAcwCvAi4ACwCHAi4AEwCQAi4AGwCvAi4AIwC4Ai4AKwDhAi4AMwDhAi4AOwDnAi4AQwC4
Ai4ASwD5Ai4AUwDhAi4AWwAcA0MAYwC3AEkAcwCvAmEAewC3AGMAawC3AIkAowBmA6MAewC3AKMA
gwARBKMAiwBxBKMAkwC3AKkAowBvA8MAewC3AMMAmwCbBMkAowB4A+MAewC3AOMAiwD7BOMAkwC3
AOkAowCBAwMBewC3AAMBqwAlBQMBiwAvBQMBkwC3AAkBowCTAyMBewC3ACMBiwBZBSMBkwC3ACkB
owClA0MBewC3AEMBiwBxBEMBkwC3AEkBowDkA2ABowBmA2MBewC3AGMBiwCDBWMBkwC3AGkBowCl
A4ABowBmA4MBewC3AIMBqwAlBYMBiwCtBYMBkwC3AIkBowD2A6MBewC3AKMBiwDXBaMBkwC3AKkB
owDkA8ABowBvA8MBewC3AMMBqwAlBcMBiwABBsMBkwC3AMkBowClA+ABowBvA+MBewC3AOMBiwAr
BuMBkwC3AOkBowBmAwACowB4AwMCewC3AAMCiwBVBgMCkwC3AAkCowDkAyACowCBAyMCewC3ACMC
iwB/BiMCkwC3ACkCowCuA0ACowCKA0MCewC3AEMCiwCpBkMCkwC3AEkCowBmA2MCewC3AGMCqwAl
BWMCiwDTBmMCkwC3AGkCowBvA4ACowCTA4MCewC3AIMCiwD9BoMCkwC3AIkCowB4A6MCewC3AKMC
iwAnB6MCqwAlBaMCkwC3AKkCowDkA8ACowCcA8MCewC3AMMCiwBRB8MCkwC3AMkCowBvA+ACowCl
A+MCewC3AOMCiwB7B+MCkwC3AOkCowD/AwADowCuAwMDewC3AAMDqwAlBQMDiwClBwMDkwC3ACMD
ewC3ACMDiwDPByMDkwC3AEADowC3A0MDewC3AEMDiwD5B0MDkwC3AGADowDAA2MDewC3AGMDqwAl
BWMDiwAjCGMDkwC3AIMDewC3AIMDiwBRB4MDgwARBIMDkwC3AKADowDJA6MDewC3AKMDiwBNCKMD
kwC3AMADowDSAwAEowDbAyAEowClA0AEowClA2AEowDkA4AEowClA6AEowClA+AEowDtAyAFowD2
A0AFowDkA2AFowClA4AFowClA8AFowBmA+AFowBmAwAGowDkA0AGowCKA4AGowCcA8AGowCuA+AG
owBmAyAHowBvA0AHowBvA2AHowB4A4AHowB4A6AHowDkA+AHowBvAyAIowD/A2AIowAIBAUAwQAH
AMEACQDBAAsAwQANAMMADwDDABEAwwATAMMAFQDDABcAwwAbAMMAIQDDACMAwQAlAMUAJwDHACkA
wwAzAMMANQDFADkAwwA7AMMAPQDDAD8AxQBDAMEARQDBAEcAwwBJAMUASwDDAE0AwwBPAMMAUQDD
AFMAwwBVAMEAVwDBAFkAwwBbAMMAXQDDAF8AxQBhAMMAYwDJACcAAwABAAQAAwAHAAQACwAJAAwA
CgANAAsADgANAA8ADgATABAAFgARABcAEwAYABUAGQAWABoAFwAAAMUJMAIAADcFNQIAAI0MOgIA
ALwEPwIAAIQDPwIAAJAJQwIAAKQJSAIAAHAJTQIAAJsDUgIAAHMIVgIAAJsDUgIAACoJXAIAAHMI
YQIAAJsDUgIAALwEPwIAAHMIZwIAAPcIbQIAABcJcgIAAEIDPwIAAAcKdwIAAHMIfAIAAE8JggIA
ANYCUgICAAQAAwACAAUABQABAAYABQACAAcABwACAAsACQABAAwACQACAA4ACwABAA8ACwACABAA
DQACABEADwACABQAEQACACEAEwABACIAEwACACMAFQACACQAFwABACUAFwACACkAGQACACoAGwAC
ACsAHQABACwAHQACAC4AHwABAC8AHwACADAAIQACADYAIwACADcAJQACADkAJwABADoAJwACADsA
KQABADwAKQACAD0AKwACAD8ALQACAEEALwAEgAAAAQAAAJcZe3QAAAAAAAAABAAABAAAAAAAAAAA
AAAAoADzAwAAAAANAAAAAAAAAAAAAACpANcHAAAAAAoAAAAAAAAAAAAAAKkAqwMAAAAABAAAAAAA
AAAAAAAAoAB4CAAAAAAAAAAAAQAAABoLAAAeAAIAAAAASURUU0NvbXBvbmVudE1ldGFEYXRhMTAw
AElEVFNQaXBlbGluZTEwMABJRFRTUGF0aDEwMABJRFRTT2JqZWN0TW9kZWwxMDAASURUU0V4dGVy
bmFsTWV0YWRhdGFDb2x1bW4xMDAASURUU0lucHV0Q29sdW1uMTAwAElEVFNWaXJ0dWFsSW5wdXRD
b2x1bW4xMDAASURUU0NvbXBvbmVudE1ldGFEYXRhQ29sbGVjdGlvbjEwMABJRFRTUGF0aENvbGxl
Y3Rpb24xMDAASURUU0V4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uMTAwAElEVFNWaXJ0
dWFsSW5wdXRDb2x1bW5Db2xsZWN0aW9uMTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rp
b24xMDAASURUU0lucHV0Q29sbGVjdGlvbjEwMABJRFRTT3V0cHV0Q29sbGVjdGlvbjEwMABJRFRT
UnVudGltZUNvbm5lY3Rpb24xMDAASURUU0Nvbm5lY3Rpb25NYW5hZ2VyMTAwAElEVFNPYmplY3Qx
MDAASURUU0Rlc2lnbnRpbWVDb21wb25lbnQxMDAASURUU0lucHV0MTAwAElEVFNWaXJ0dWFsSW5w
dXQxMDAASURUU091dHB1dDEwMABJRFRTQ3VzdG9tUHJvcGVydHkxMDAAX1Z0YmxHYXAxXzEwAF9W
dGJsR2FwMV8xAF9WdGJsR2FwM18xAF9WdGJsR2FwMV8xMgBfVnRibEdhcDJfMTIASW50MzIAX1Z0
YmxHYXAxXzIAX1Z0YmxHYXAyXzIAX1Z0YmxHYXAzXzIAX1Z0YmxHYXAxXzEzAF9WdGJsR2FwMV8z
AF9WdGJsR2FwMV80AF9WdGJsR2FwMV84ADxNb2R1bGU+AFVUX0lHTk9SRUQAZ2V0X0lEAHNldF9J
RABnZXRfTGluZWFnZUlEAGxMaW5lYWdlSUQAbEV4dGVybmFsTWV0YWRhdGFDb2x1bW5JRABsSW5w
dXRDb2x1bW5JRABwSUQAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VySUQAc2V0X0Nvbm5lY3Rpb25NYW5h
Z2VySUQAcGJzdHJDb25uZWN0aW9uTWFuYWdlcklEAGdldF9Db21wb25lbnRDbGFzc0lEAHNldF9D
b21wb25lbnRDbGFzc0lEAGJzdHJDb21wb25lbnRDbGFzc0lEAGxJbnB1dElEAFVUX1JFQURXUklU
RQBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAVVRfUkVBRE9OTFkAdmFsdWVfXwBSZWlu
aXRpYWxpemVNZXRhRGF0YQBtc2NvcmxpYgBBZGQAU1RfZmI2NTY0ZGM4MDJkNGQxYmJiMDVhNjI1
MjdiOTAxZWQAR2V0RXh0ZW5kZWRJbnRlcmZhY2UAZGVmYXVsdEluc3RhbmNlAFBhY2thZ2UASUVu
dW1lcmFibGUASURpc3Bvc2FibGUARXhlY3V0YWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBnZXRfTmFtZQBzZXRfTmFtZQBwYnN0ck5hbWUAUHJvcGVydHlOYW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUATWFpblBpcGUARFRTVXNhZ2VUeXBlAGVVc2FnZVR5
cGUAU2V0VXNhZ2VUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VD
dWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFz
ZQBEaXNwb3NlAEluc3RhbnRpYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAERpc3BJZEF0dHJpYnV0
ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBHdWlkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1
dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJn
ZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2Vt
Ymx5RGVzY3JpcHRpb25BdHRyaWJ1dGUARGVmYXVsdE1lbWJlckF0dHJpYnV0ZQBUeXBlSWRlbnRp
ZmllckF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAENvQ2xhc3NBdHRy
aWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRl
AFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1
dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUARXhlY3V0ZQB2VmFsdWUAdmFsdWUAU3lz
dGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBzZXRfQ29ubmVjdGlvblN0cmluZwBNaWNyb3NvZnQuU3Fs
U2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFz
awBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfZmI2NTY0ZGM4MDJk
NGQxYmJiMDVhNjI1MjdiOTAxZWQuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFu
AFNjcmlwdE1haW4ATWFwSW5wdXRDb2x1bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkds
b2JhbGl6YXRpb24AcFRyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAGdldF9Db21wb25lbnRN
ZXRhRGF0YUNvbGxlY3Rpb24AZ2V0X1BhdGhDb2xsZWN0aW9uAGdldF9FeHRlcm5hbE1ldGFkYXRh
Q29sdW1uQ29sbGVjdGlvbgBnZXRfVmlydHVhbElucHV0Q29sdW1uQ29sbGVjdGlvbgBnZXRfUnVu
dGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uAGdldF9JbnB1dENvbGxlY3Rpb24AZ2V0X091dHB1dENv
bGxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBwcElEVFNDb25uZWN0aW9u
TWFuYWdlcgBnZXRfQ29ubmVjdGlvbk1hbmFnZXIAc2V0X0Nvbm5lY3Rpb25NYW5hZ2VyAER0c0Nv
bnRhaW5lcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgBDTWFuYWdlZENvbXBvbmVudFdyYXBwZXIA
SUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNz
AFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfZmI2NTY0ZGM4MDJkNGQxYmJiMDVhNjI1MjdiOTAx
ZWQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2ZiNjU2
NGRjODAyZDRkMWJiYjA1YTYyNTI3YjkwMWVkLlByb3BlcnRpZXMAUHJvdmlkZUNvbXBvbmVudFBy
b3BlcnRpZXMAZ2V0X0V4ZWN1dGFibGVzAFNldHRpbmdzAEF0dGFjaFBhdGhBbmRQcm9wYWdhdGVO
b3RpZmljYXRpb25zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAQWNxdWlyZUNv
bm5lY3Rpb25zAFJlbGVhc2VDb25uZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0
cwBGb3JtYXQAZ2V0X0lubmVyT2JqZWN0AHBJRFRTVmlydHVhbElucHV0T2JqZWN0AGdldF9EZWZh
dWx0AERUU0V4ZWNSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAZ2V0X0N1cnJlbnQARHRzQ29udmVydABU
YXNrSG9zdABwSURUU0lucHV0AEdldFZpcnR1YWxJbnB1dABwSURUU091dHB1dABNb3ZlTmV4dABO
ZXcASW5kZXgAZ2V0X0Fzc2VtYmx5AFNldENvbXBvbmVudFByb3BlcnR5AAAAACVTAFQATwBDAEsA
OgBQAGkAcABlAGwAaQBuAGUAVABhAHMAawAANUQARgBUACAALQAgAFQAcgBhAG4AcwBmAGUAcgAg
AEQAZQBwAGEAcgB0AG0AZQBuAHQAcwABC08ATABFAEQAQgAAP08ATABFACAARABCACAAUwBvAHUA
cgBjAGUAIABDAG8AbgBuAGUAYwB0AGkAbwBuAE0AYQBuAGEAZwBlAHIAAICtUAByAG8AdgBpAGQA
ZQByAD0AUwBRAEwATwBMAEUARABCAC4AMQA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AHsAMAB9
ADsASQBuAGkAdABpAGEAbABDAGEAdABhAGwAbwBnACAAPQB7ACAAMQB9ADsAIABJAG4AdABlAGcA
cgBhAHQAZQBkACAAUwBlAGMAdQByAGkAdAB5ACAAPQAgAFMAUwBQAEkAOwAgAAADLgAAJUEAZAB2
AGUAbgB0AHUAcgBlAFcAbwByAGsAcwAyADAAMQAyAABFTwBMAEUARABCACAARABlAHMAdABpAG4A
YQB0AGkAbwBuAEMAbwBuAG4AZQBjAHQAaQBvAG4ATQBhAG4AYQBnAGUAcgAAI1AAYQBjAGsAdABQ
AHUAYgBfAFMAUwBJAFMAYgBvAG8AawAAF08ATABFAEQAQgBTAG8AdQByAGMAZQAAMUQAVABTAEEA
ZABhAHAAdABlAHIALgBPAGwAZQBEAGIAUwBvAHUAcgBjAGUALgAzAAAVQQBjAGMAZQBzAHMATQBv
AGQAZQAAFVMAcQBsAEMAbwBtAG0AYQBuAGQAAE9TAEUATABFAEMAVAAgACoAIABGAFIATwBNACAA
SAB1AG0AYQBuAFIAZQBzAG8AdQByAGMAZQBzAC4ARABlAHAAYQByAHQAbQBlAG4AdAAAN0QAVABT
AEEAZABhAHAAdABlAHIALgBPAGwAZQBEAGIARABlAHMAdABpAG4AYQB0AGkAbwBuAAAhTwBMAEUA
RABCAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAAFU8AcABlAG4AUgBvAHcAcwBlAHQAADNIAHUAbQBh
AG4AUgBlAHMAbwB1AHIAYwBlAHMALgBEAGUAcABhAHIAdABtAGUAbgB0AAAfRgBhAHMAdABMAG8A
YQBkAE8AcAB0AGkAbwBuAHMAADNUAEEAQgBMAE8AQwBLACwAQwBIAEUAQwBLAF8AQwBPAE4AUwBU
AFIAQQBJAE4AVABTAABxUwBUAF8AZgBiADYANQA2ADQAZABjADgAMAAyAGQANABkADEAYgBiAGIA
MAA1AGEANgAyADUAMgA3AGIAOQAwADEAZQBkAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBz
AG8AdQByAGMAZQBzAAB7mOWt9bjgS6t7zx6CfJEfAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFd
BSABARJtBSACAQ4OGgcMEj0ScBIcEhwSFBI0EmQSQRJoEjwSLBJFBSAAEoCJBiABEoCNDgMgABwF
IAASgJkGIAESgJ0OBgADDg4cHAYgARKAnRwHAAESdBKAnQMgAA4DIAACBSAAEYCtBSAAEoCxBwAB
Em0RgLUFIAASgLkHIAIBDhKAuQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAEAgAAAAETARwB
GwEZgKssAACApVN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DdXN0b21NYXJzaGFsZXJz
LkVudW1lcmF0b3JUb0VudW1WYXJpYW50TWFyc2hhbGVyLCBDdXN0b21NYXJzaGFsZXJzLCBWZXJz
aW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1
MGEzYQADBhJVAwYSWQMGEhACBggDBhEYAwYReAQAABJVBAAAElkFAAEBElkEAAASEAMAAAEEIAAS
OAQgABJMBCAAEhQEIAASYAQgABIcCiAEEjwIEmQIERgGIAISJA4cBCABARwHIAMSLAgICAMgAAgF
IAESLBwEIAASZAQgABIwBSABEjQcBSABEkgcByACARJIEjQEIAASUAQgABIgBCAAElQEIAASdAUg
AQESdAUgARJcHAQgABJsBCAAEkEECAASVQQIABJZBAgAEhADCAAOBAgAEjgECAASTAQIABJgAwgA
CAUIARIsHAQIABIwBQgBEjQcBQgBEkgcBAgAEiAECAASVAQIABJ0BQgBElwcBAgAEmwIAQAIAAAA
AAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2ZiNjU2NGRj
ODAyZDRkMWJiYjA1YTYyNTI3YjkwMWVkAAAFAQAAAAARAQAMQW5nbGljYXJlLVNBAAAiAQAdQ29w
eXJpZ2h0IEAgQW5nbGljYXJlLVNBIDIwMTcAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
NQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41CAEADQAAAAAACAEA
ZQAAAAAACAEAZgAAAAAACAEAZwAAAAAACAEAaAAAAAAACAEAcgAAAAAACAEADgAAAAAACAEACwAA
AAAACAEADAAAAAAACAEAEAAAAAAACAEAEQAAAAAACAEAHgAAAAAACAEAHwAAAAAACAEAIQAAAAAA
CAEAAAAAAAAACAEAaQAAAAAACAEAdAAAAAAACAEAbAAAAAAACAEA/P///wAAXwEAWlN5c3RlbS5P
YmplY3QsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGlj
S2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQAAKQEAJEIxMzA5N0U1LTQ0NjUtNEE5Qy1CQjc0LUZG
QzhGOEUzMDc2MAAAXwEAJDZlOTQ0ZWEyLTE0YTAtNDk5Ny05OGZhLTNlMTk5NWQ4MGJkOTVNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyLkRUU1VzYWdlVHlwZQAAKQEAJEEz
N0FFRTAzLTc0OTAtNDBCNi05RUFBLUJERUI2QThBOEI3RAAACQEABEl0ZW0AACkBACQ0RUNBNkM5
MS01MUU0LTQ0NTUtQTJBNC0wN0VCRDgxQUFFNTgAACkBACQ3RDRGMkZBQS0xRjBCLTRFNTctOUYx
NS1GQzU1RTI4MjhFOUUAACkBACRCREQ2RDI5NS1FM0RFLTQ1NUItQkI1Ni1EMTFCOUI0QkY0QjMA
ACkBACRFNDcyQjZBRS0yMDJDLTRDNjctOEY0NC03RDdFRTM4MDdBNDQAACkBACQyNEM2NDEyOS03
MzE3LTRFMkYtQUFGMi04MDk2NDc5NkUzQUUAACkBACREOTVFQzlCOC1GNkI0LTQ5MTItQUIzOS05
RDZBRkVGNjJDMEUAACkBACRFNTgyNjkxNy1ENzU2LTQ1ODAtQjI1RS0xNTI1QjcyNTNERUUAACkB
ACQzMEU1RDBFRi1FMzNELTQ5NDUtOEE3Ri1GNTE3OEZDNjRDMjQAACkBACQ5MEIyOTdDRi03NTIw
LTRBN0QtQTIwRS02OTMzMTFBMjA2NDEAACkBACQyRDE1MDhEMS05OTk4LTQ5NjgtQjYwOC1ENTI3
Q0JFQTk5RUUAACkBACQxRUVGODM4NC0wRkZDLTQ0QjgtODc3Qi1GMjQ2ODgwRUM2Q0YAACkBACQx
NzIwNjZEQy0yNEVFLTQ1NjktQjIyNC0xN0E0NTcyNDk4NzYAACkBACQ3Q0JEODY0OS0xRkUxLTQ3
RTMtOTgyQS1GRUVGQkFDNjkzOTAAACkBACQ4OUNFQkE4Ni1FQzUxLTRDNjItQTJEMy1FOUFBNEZD
Mjg5MDAAACkBACRDQzM1OTI0Mi0xRDIyLTRCNUQtOEMyMC1GQUI3NjQxNzQ2NzYAACkBACQyOTc0
QTM0NC01QjVDLTQ5NDctODk2RC02QkRCRjIwMDJGMTkAACkBACQ4NkZDOTYyOS03NjlBLTQ3OUUt
ODJFRC1DNkZENzVDMkZDOEUAACkBACQzNzlBRDNDQy1BMDk4LTQwQjQtOUY1NC1CQ0UxQjExMTZB
MkYAACkBACRBREI5NTI2Mi1FNUZDLTQxRjgtODlFMi1CQUNEODIwMENBRjIAACkBACRFNkU0NkI3
QS02NDI0LTQxQzItQjY1OC0zODcyMjFEQjc0RUQAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5S
ZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1
cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3Vy
Y2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAGE8AAAAAAAAAAAAA
Mk8AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAACRPAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNj
b3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAA
AAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAASgQAAAAA
AAAAAAAASgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAB
AHt0lxkAAAEAe3SXGT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBKoDAAAB
AFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAIYDAAABADAAMAAwADAAMAA0AGIAMAAAABoA
AQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA6AA0AAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAA
AEEAbgBnAGwAaQBjAGEAcgBlAC0AUwBBAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBUAF8AZgBiADYANQA2ADQAZABjADgAMAAyAGQANABkADEAYgBiAGIAMAA1
AGEANgAyADUAMgA3AGIAOQAwADEAZQBkAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADYANQA1ADEALgAyADkAOAAxADkAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AZgBiADYANQA2ADQAZABjADgAMAAyAGQANABkADEAYgBiAGIAMAA1AGEA
NgAyADUAMgA3AGIAOQAwADEAZQBkAC4AZABsAGwAAABgAB4AAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABBAG4AZwBsAGkAYwBhAHIAZQAtAFMA
QQAgADIAMAAxADcAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAA
AHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBmAGIANgA1ADYA
NABkAGMAOAAwADIAZAA0AGQAMQBiAGIAYgAwADUAYQA2ADIANQAyADcAYgA5ADAAMQBlAGQALgBk
AGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AZgBiADYANQA2ADQA
ZABjADgAMAAyAGQANABkADEAYgBiAGIAMAA1AGEANgAyADUAMgA3AGIAOQAwADEAZQBkAAAAQgAP
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADUANQAxAC4AMgA5ADgA
MQA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2
ADUANQAxAC4AMgA5ADgAMQA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAEQ/AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="569,42"
          Id="Package\Data Flow Component Programmatically  -- read data from source table and input into destination table"
          TopLeft="132,263" />
        <AnnotationLayout
          Text="Purpose: this code is to test dynamicly builiding data flow ETLs not using actual data source and data destination componet&#xA;which can help create ETL bulkly and quickly especially there are multiple similar data process flow&#xA;example: reading csv files and loading them into data warehouse tables&#xA;Refer book: Packt.Microsoft SQL Server 2012 Integration Services.... SSIS programming"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="684,90"
          Id="4c425d11-2d3d-417d-8486-dd8d23fc4c4f"
          TopLeft="607,46" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>