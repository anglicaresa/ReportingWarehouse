<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/23/2016 2:19:29 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W7PC01XQ1T"
  DTS:CreatorName="ANGLICARE-SA\jshen"
  DTS:DTSID="{5680E01B-7CF6-4AE6-9CBD-77AC91719A47}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2164.0"
  DTS:LocaleID="3081"
  DTS:ObjectName="Conform_RiskMan_Fact - backup20170719"
  DTS:PackageType="5"
  DTS:VersionBuild="607"
  DTS:VersionGUID="{C91CC439-C948-471F-B537-FE415A49BC58}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[devsql-1\whouse.DWHB.asadwh]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
      DTS:ObjectName="devsql-1\whouse.DWHB.asadwh">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=devsql-1\whouse;Initial Catalog=DWHB;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{875E590E-3668-400E-AC54-4CBE99191BD2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="anniversary_date_key">
      <DTS:VariableValue
        DTS:DataType="3">9999999</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E318C8A0-AF3D-4051-8659-58827B8D043D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_code_new">
      <DTS:VariableValue
        DTS:DataType="8">N</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6AE8532F-0A83-45B4-9EAE-D2934E0C7AF4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_code_update">
      <DTS:VariableValue
        DTS:DataType="8">U</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{259F0995-E6E7-4485-9538-3A4FDB4834DA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_description_new">
      <DTS:VariableValue
        DTS:DataType="8">NEW</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{63119449-2F3F-4982-B452-270AC0D6DFA4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_description_update">
      <DTS:VariableValue
        DTS:DataType="8">UPDATE</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{92BA5589-F2F5-40C6-BBE1-F4D548EDADBC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="current_row_indicator">
      <DTS:VariableValue
        DTS:DataType="8">Y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42DB0096-F686-4050-A58C-49A812C5A529}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="etl_start_date">
      <DTS:VariableValue
        DTS:DataType="7">7/19/2017 11:39:59 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6983399B-B15F-4260-B739-DC0AF1552D68}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="manager_pos_key">
      <DTS:VariableValue
        DTS:DataType="3">1694</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4B477CDB-941C-400D-B3FC-691BD1B0574F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="manger_key">
      <DTS:VariableValue
        DTS:DataType="3">1780</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D52F1F10-7258-41D2-A331-AF6D549FAC2D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="new_position_flag">
      <DTS:VariableValue
        DTS:DataType="8">Y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3CDBCF8E-89CC-4CC6-8DD7-3CF3516A5777}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="position_vacant_date_key">
      <DTS:VariableValue
        DTS:DataType="3">9999999</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{227AADF2-B1FC-4D77-BCCC-99B1083A7561}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="row_effective_date">
      <DTS:VariableValue
        DTS:DataType="7">7/19/2017 11:39:59 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{527C03B6-F46B-498C-8FFF-5D55878B4590}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="row_expiration_date">
      <DTS:VariableValue
        DTS:DataType="7">7/19/2017 11:39:59 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E511B3B3-5525-4B65-9D7B-51C925923BED}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="survery_completed">
      <DTS:VariableValue
        DTS:DataType="8">NO</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Sequence Container - Fact Tables"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{FBECB48E-DD76-4FAE-B3CD-6E9E457EEBE6}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container - Fact Tables">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{3099B217-439A-4BF5-8BC7-779227B63B9E}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="INCIDENT_ACTION_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{424DD06B-D9E6-473F-BF0F-F4B8E349D2BB}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="truncate table conform_riskman.INCIDENT_ACTION_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{FE2037EF-53BB-4DA1-9678-FA9CDEC32093}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_action_bridge'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{261B40A1-F331-4C40-8AB3-392B7920AB0F}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_ACTION_FACT'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{D17AE219-06DD-480B-BEDD-AAE2716E25A0}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="/*-------------------------old method--------------------------------------------------------------------------------&#xA;IF OBJECT_ID('tempdb..#action_temp') IS NOT NULL drop table #action_temp;&#xA;&#xA;create table #action_temp&#xA;(batchid int,&#xA; pca varchar(255),&#xA; spca varchar(500),&#xA; due_date date,&#xA; com_date date&#xA; )&#xA;&#xA; create clustered index idx_riskman_temp_batchid on #action_temp(batchid);&#x9;&#x9; &#xA;&#xA; IF OBJECT_ID('tempdb..#action_temp_pca') IS NOT NULL drop table  #action_temp_pca&#xA;create table  #action_temp_pca&#xA;(batchid int,&#xA; action varchar(255)&#xA; )&#xA; &#xA; create clustered index idx_riskman_temp_pca_batchid on #action_temp_pca(batchid);&#x9;&#x9; &#xA;&#xA; IF OBJECT_ID('tempdb..#action_spca') IS NOT NULL drop table #action_temp_spca &#xA; create table  #action_temp_spca &#xA;(batchid int,&#xA; action varchar(500)&#xA; )&#xA;  create clustered index idx_riskman_temp_spca_batchid on #action_temp_spca(batchid);&#x9;&#x9;&#xA;&#xA;IF OBJECT_ID('tempdb..#action_ddate') IS NOT NULL  drop table #action_temp_ddate&#xA; create table #action_temp_ddate &#xA;(batchid int,&#xA; vdate datetime&#xA; )&#xA;   create clustered index idx_riskman_temp_ddadte_batchid on #action_temp_ddate(batchid);&#x9;&#x9;&#xA;&#xA;&#xA; IF OBJECT_ID('tempdb..#action_cdate') IS NOT NULL   drop table  #action_temp_cdate &#xA;  create table #action_temp_cdate &#xA;(batchid int,&#xA; vdate datetime&#xA; )&#xA;&#xA; create clustered index idx_riskman_temp_cdadte_batchid on #action_temp_cdate(batchid);&#x9;&#x9;&#xA; &#xA; --populate preventative_corrective_action&#xA; insert into #action_temp_pca&#xA; select distinct BatchID, left(ValueString,255)&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAPrevCorAct'&#xA;&#xA; --populate specific_preventative_corrective_action&#xA; insert into #action_temp_spca&#xA; select distinct BatchID, left(ValueString,500)&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAPrevCorActOth'&#xA; &#xA;  --populate action_due_date&#xA; insert into #action_temp_ddate&#xA; select distinct BatchID,  ValueDate&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAActImpDate'&#xA;     &#xA; --populate action_completed_date&#xA; insert into #action_temp_cdate&#xA; select distinct BatchID,  ValueDate&#xA; from extract_riskman.FRM_DATA &#xA;  where fieldname ='PCAActComDate'&#xA;&#xA;&#xA; --populate preventative_corrective_action&#xA; insert into #action_temp (batchid, pca)&#xA; select distinct BatchID, action&#xA; from #action_temp_pca&#xA;&#xA; --populate specific_preventative_corrective_action&#xA; update t1&#xA; set t1.spca = t2.action&#xA; from #action_temp as t1&#xA; inner join #action_temp_spca &#x9;as t2 on t1.batchid=t2.BatchID&#xA; &#xA;  --populate action_due_date&#xA; update t1&#xA; set t1.due_date = convert(date,t2.vdate)&#xA; from #action_temp as t1&#xA; inner join #action_temp_ddate  t2 on t1.batchid=t2.BatchID &#xA;&#xA;   --populate action_completed_date&#xA; update t1&#xA; set t1.com_date = convert(date,t2.vdate)&#xA; from #action_temp as t1&#xA; inner join #action_temp_cdate  t2 on t1.batchid=t2.BatchID &#xA; where t2.vdate is not null&#xA;&#xA;&#xA;insert into conform_riskman.INCIDENT_ACTION_FACT&#xA;  select &#xA;  f1.incident_key,&#xA;  m.action_key&#xA;  from conform_riskman.incident_fact as f1&#xA;  inner join&#xA;&#xA;  (&#xA;&#xA;&#x9;  select &#xA;&#x9;    n2.CH_ID,&#xA;&#x9;&#x9;n1.action_key&#xA;&#x9;  from &#xA;&#xA;&#x9;  (&#xA;&#xA;&#x9;&#x9; select g1.*,&#xA;&#x9;&#x9;   ISNULL(dd1.action_key,(select action_key from  conform_riskman.action_dim where current_row_indicator='Y' and preventative_corrective_action='No Action Type'))  as action_key&#xA;&#x9;&#x9; from #action_temp as g1&#xA;&#x9;&#x9; left join &#xA;&#x9;&#x9; (&#xA;&#x9;&#x9;  select dd1.* &#xA;&#x9;&#x9;  from &#x9;conform_riskman.action_dim  as dd1&#xA;&#x9;&#x9;  inner join&#xA;&#x9;&#x9;&#x9; (&#xA;&#x9;&#x9;&#x9;  select preventative_corrective_action,specific_preventative_corrective_action,action_due_date,action_completed_date ,max(action_key) as action_key&#xA;&#x9;&#x9;&#x9; from conform_riskman.action_dim &#xA;&#x9;&#x9;&#x9; where current_row_indicator='Y' &#xA;&#x9;&#x9;&#x9; group by preventative_corrective_action,specific_preventative_corrective_action,action_due_date,action_completed_date &#xA;&#x9;&#x9;&#x9; ) &#x9;   as d1 &#xA;&#x9;&#x9;&#x9;on dd1.action_key=d1.action_key&#xA;&#x9;&#x9;  ) as dd1&#xA;&#x9;&#x9; on g1.pca=dd1.preventative_corrective_action  &#xA;&#x9;&#x9; and g1.spca =dd1.specific_preventative_corrective_action &#xA;&#x9;&#x9; and g1.due_date=dd1.action_due_date &#xA;&#x9;&#x9; and g1.com_date=dd1.action_completed_date &#xA;&#xA;&#x9;   ) as n1&#xA;&#x9;   inner join &#xA;&#x9;   (    select f1.ch_id, f1.PCARECID,f1.PCAPrevRECID,f2.KeyData,f3.RecordID,f3.BatchID&#xA;&#x9;&#x9; from extract_riskman.CH_IFR   as f1&#xA;&#x9;&#x9; inner join  extract_riskman.FRM_RECORD as f2 on f1.PCAPrevRECID=f2.KeyData&#xA;&#x9;&#x9; inner join &#x9; extract_riskman.FRM_BATCH&#x9; as f3 on f2.RecordID=f3.RecordID&#xA;      ) as n2 &#xA;&#x9;  on n1.batchid=n2.BatchID&#xA;&#xA;&#x9;  ) as m&#xA;&#x9;  on f1.id=m.CH_ID&#xA;-------------------------------------------------------------------------*/&#xA;&#xA;&#xA;&#xA;&#xA;----new method from VIEW changed by JS at 20/06/2017&#xA;&#xA;&#xA;insert into conform_riskman.INCIDENT_ACTION_FACT&#xA;  select &#xA;  f1.incident_key,&#xA;  f2.action_key&#xA;  from conform_riskman.incident_fact as f1&#xA;  inner join conform_riskman.action_dim as f2&#xA;  on f1.id=f2.ch_id&#xA;&#xA;&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{97E1C62F-2C09-4E4E-B78F-C648F67E09FC}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{DE512EBB-A51F-41A9-810E-BD400E64F2CC}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{D8B0BC95-628B-4089-8592-875ED8BFAE09}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{6A847FE3-4F8F-4074-986B-8EC1D217BD5E}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{261FDC2F-8CF2-4387-B94C-78531ACDEE06}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{DAA8B25B-5F00-4D99-AF5D-01192CA07577}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{E85ED4B0-760B-483B-A76C-D79EA17A6DAC}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{910BE337-92E6-4258-877C-A4EDB457BDD3}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="INCIDENT_TYPE_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{8DBC5763-CEA9-42F7-8E02-C9EB4B847300}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="truncate table conform_riskman.INCIDENT_TYPE_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{80E4BA94-E78F-4D08-B074-49214770A247}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_TYPE_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{5E77A73D-B43A-46F8-AA75-5561BEDB2453}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_TYPE_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{722AC88A-4AE4-4CBA-B465-EE3BD01DD698}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="--process definitions is not null&#xA; insert into   conform_riskman.INCIDENT_TYPE_FACT&#xA; select &#xA; f1.incident_key,&#xA; isnull(g1.incident_type_key, (select incident_type_key from conform_riskman.incident_type_dim  where current_row_indicator='Y' and super_group='No Incident Type' ))&#xA; from  conform_riskman.incident_fact as f1&#xA; inner join  &#xA; (&#xA;&#x9;  select t1.id, d1.incident_type_key&#xA;&#x9;  from &#x9;extract_riskman.IncidentClassificationsIFR as t1&#xA;&#x9;  inner join  conform_riskman.incident_type_dim as d1&#xA;&#x9;  on &#x9;  left(t1.Supergroup,50) =d1.super_group&#xA;       and left(t1.IncidentClass,50) =d1.incident_class&#xA;       and t1.Definitions is not NULL&#xA;&#x9;   and d1.definitions is not null&#xA;&#x9;   and left(t1.Definitions,50) = d1.definitions&#x9;&#x9; &#xA;&#xA; ) as g1&#xA; on f1.id=g1.ID&#xA;&#xA; --process definitions is  null&#xA; insert into   conform_riskman.INCIDENT_TYPE_FACT&#xA; select &#xA; f1.incident_key,&#xA; isnull(g1.incident_type_key, (select incident_type_key from conform_riskman.incident_type_dim  where current_row_indicator='Y' and super_group='No Incident Type' ))&#xA; from  conform_riskman.incident_fact as f1&#xA; inner join  &#xA; (&#xA;&#x9;  select t1.id, d1.incident_type_key&#xA;&#x9;  from &#x9;extract_riskman.IncidentClassificationsIFR as t1&#xA;&#x9;  inner join  conform_riskman.incident_type_dim as d1&#xA;&#x9;  on &#x9;  left(t1.Supergroup,50) =d1.super_group&#xA;       and left(t1.IncidentClass,50) =d1.incident_class&#xA;       and t1.Definitions is  NULL&#xA;&#x9;   and d1.definitions is  null&#xA;&#x9;  &#xA;&#xA; ) as g1&#xA; on f1.id=g1.ID" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{8386740D-A602-40D7-9C92-602CD7ADE012}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{E3F8762D-453A-4008-8AB5-E602CA72B7D1}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{4F6072E4-1B88-4873-B665-640996C78DC0}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{365FA67D-B31B-4898-91AC-1FE082142A8A}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{A5C9E1FB-39A4-48DC-AB9B-FFD6CBDD8666}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{42DA359E-B984-433A-8E3F-2CD83D0D9565}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{E85ED4B0-760B-483B-A76C-D79EA17A6DAC}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:Disabled="True"
          DTS:DTSID="{EE2E68A5-BD81-4CEA-830E-FF11941A9349}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - INCIDENT_FACT -- keep all records and with bridge tables">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{1CAF2E4E-FC25-4CAB-BB61-68D9E5746621}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table conform_riskman.incident_type_bridge&#xA;truncate table conform_riskman.incident_action_bridge&#xA;delete from conform_riskman.incident_fact" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{721BC390-4925-4908-99A1-1A850B01972B}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{1D143916-0F2F-483B-A5F5-4B35D484EA1A}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{4E2903F1-38E2-4512-84E9-DDCBF32F816C}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource=" --delete old data&#xA;delete from  conform_riskman.incident_fact&#xA; --populate new data &#xA; insert into conform_riskman.incident_fact&#xA; select &#xA;  id&#xA; ,BaseID&#xA; ,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') --default employee_key&#xA; ,(select person_key from conform_riskman.person_dim&#x9;where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim&#x9;where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim&#x9;where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim&#x9;where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = IncidentDate)&#x9;,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateDeleted)&#x9;,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateEntered)&#x9; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_ini_date_key&#xA; , (select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_completed_date_key&#xA; ,IncidentTime&#xA; , Age&#xA; , left(Outcome,20)&#xA; , left(Status,20)&#xA; , left(Program,50)&#xA; , case IncidentInvolved &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),IncidentInvolved)&#xA;    end&#xA;&#xA; , case Deceased &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),Deceased)&#xA;    end&#xA; , case CoronerNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),CoronerNotified)&#xA;    end&#xA;&#xA;  , case Autopsy &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),Autopsy)&#xA;    end&#xA;&#xA; , case NextOfKinNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),NextOfKinNotified)&#xA;    end&#xA;&#xA;&#xA;&#x9;, left(NotificationReason,20)&#xA;&#x9;, left(TransferRequired,20)&#xA;&#x9;,left(EmployeeSite,50)&#xA;&#x9;,left(NatureOfInjury,50)&#xA;&#x9;, left(Description ,255)&#xA;&#x9;, left(StaffLostTimeHours,3)&#xA;&#x9;, 'No' -------- defulat value for investigation_initiated&#xA;&#x9;,StaffWorkcoveNotif&#xA;&#x9;,StaffInjury&#xA;&#x9;,'No'  -------- defulat value for preventative_corrective_action_required&#xA;    ,'No'  -------- defulat value for police_notified&#xA;&#x9;,'No'  -------- defulat value for fire_brigade_notified&#xA;&#x9;,'No'  -------- defulat value for ambulance__notified&#xA;&#x9;,'No'  -------- defulat value for human_services_notified&#xA;&#x9;,'No'  -------- defulat value for health_sa_notified&#xA;&#x9;,'No'  -------- defulat value for crisis_intervention_notified&#xA;&#x9;,'No'  -------- defulat value for carl_notified&#xA;&#x9;,'No'  -------- defulat value for ag_notified&#xA;    ,'No'  -------- defulat value for housing_regulator_notified&#xA;&#x9;,'No'  -------- defulat value for funder_notified&#xA;    ,'No'  -------- defulat value for parent_guardian_notified&#xA; from extract_riskman.IncidentsForReview &#xA;&#xA;&#xA;&#xA; --update   InvDate&#x9;and InvestCompDate&#x9;,  investigation_initiatede,PHNotif,ACATNotif&#x9;from ANGCARE_IFR&#xA; update t1&#xA; set   t1.investigation_initiated_date_key=d1.date_key&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvDate =d1.full_date&#xA;&#xA;  update t1&#xA; set   t1.investigation_completed_date_key=d1.date_key&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvestCompDate =d1.full_date&#xA;&#xA; update t1&#xA; set   t1.investigation_initiated=(case t2.InvInit&#x9; when '0' then 'No' when '1' then 'Yes' else  convert(varchar(3), t2.InvInit) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.health_sa_notified=(case t2.PHNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.PHNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.crisis_intervention_notified=(case t2.ACATNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.ACATNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;  --update preventative_corrective_action_required from ch_ifr table&#xA;&#xA; update t1&#xA; set   t1.preventative_corrective_action_required=(case t2.CHPrevActReq&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.CHPrevActReq) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.CH_IFR as t2&#x9; on t1.id=t2.CH_ID&#xA;&#xA; --update column based on &#x9;BEN_IFR&#xA;  update t1&#xA; set   t1.human_services_notified=(case t2.Vicdhs&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.Vicdhs) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.BEN_IFR as t2&#x9; on t1.id=t2.ben_id&#xA;&#xA; --update columns based on &#x9;IncNotif_IFR table&#xA; update t1&#xA; set   t1.police_notified=(case t2.PoliceNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.PoliceNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;  update t1&#xA; set   t1.fire_brigade_notified=(case t2.FireNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.FireNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; &#xA;  update t1&#xA; set   t1.ambulance__notified=(case t2.AmbNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.AmbNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.carl_notified=(case t2.ChildAbuseNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.ChildAbuseNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;&#xA;    update t1&#xA; set   t1.ag_notified=(case t2.AGNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.AGNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;     update t1&#xA; set   t1.housing_regulator_notified=(case t2.HouseReg&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.HouseReg) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;  &#xA;     update t1&#xA; set   t1.funder_notified=(case t2.Funder&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.Funder) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;      update t1&#xA; set   t1.parent_guardian_notified=(case t2.GuardNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.GuardNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; --update person_key&#x9; &#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.incident_fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from &#x9;extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  and f1.DateOfBirth=d1.date_of_birth&#xA;  )&#x9; as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;  -----------update logged_by_employee_key&#xA;  --frist: based on firstname and last name&#xA;  update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.userdisplayname = d1.given_name+' '+d1.family_name&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;    update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.userdisplayname = d1.preferred_name+' '+d1.family_name&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;  --based on email:&#xA;&#xA;      update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.email = d1.street_email1&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;-------------------------------------------------------populate org structure------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--populate program_key&#xA;&#xA;   --if site is null just use incident_location&#xA;   update t1&#xA;   set &#x9; t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;&#x9; select f1.id,f1.baseid,f2.program_key&#xA;&#x9; from extract_riskman.IncidentsForReview &#x9;as f1&#xA;&#x9; inner join  conform_riskman.program_mapping as f2&#xA;&#x9; on f1.Incident_Location=f2.incident_location&#xA;&#x9; where f1.Site is null &#xA;&#x9; and f2.site is null&#xA;&#x9; and f2.program_key is not null&#xA;&#xA;&#x9;) as t2&#xA;&#x9;on t1.id =t2.id &#xA;&#x9;and t1.base_id=t2.BaseID&#xA;&#xA;   --if site is not null use site and incident_location&#xA;&#xA;&#x9;update t1&#xA;   set &#x9; t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;&#x9; select f1.id,f1.baseid,f2.program_key&#xA;&#x9; from extract_riskman.IncidentsForReview &#x9;as f1&#xA;&#x9; inner join  conform_riskman.program_mapping as f2&#xA;&#x9; on f1.Incident_Location=f2.incident_location&#xA;&#x9; and f1.Site=f2.site&#xA;&#x9; where f1.Site is not null &#xA;&#x9; and f2.site is not null&#xA;&#x9; and f2.program_key is not null&#xA;&#xA;&#x9;) as t2&#xA;&#x9;on t1.id =t2.id &#xA;&#x9;and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from &#x9; conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA;&#x9;n1.incident_key,&#xA;&#x9;n1.program_name,&#xA;&#x9;n1.service_stream_name,&#xA;&#x9;n1.portfolio_name,&#xA;&#x9;dd1.service_stream_key,&#xA;&#x9;dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select &#x9; g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select &#x9;f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code&#x9;, d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{C3C66396-E69F-4DCA-A8DE-20321EBFBF39}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{A898F57C-17F9-45A4-9062-6960E1EB5411}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{928FB1E9-9BB1-4765-B53A-610F85D74E95}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{A22CBD8B-9DDF-4449-A64E-6328AE8F5F32}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{450D16B8-36B7-4712-89A3-FF6A8F2D21AB}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{762BCE58-60BD-4647-9870-2C1EBF379FCC}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{E85ED4B0-760B-483B-A76C-D79EA17A6DAC}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{BABD88FE-89B0-40F5-B9BA-6D6EDA25D2B7}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - INCIDENT_FACT -- Keep one record for one incident">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{56CA1CCF-B86D-4682-9C03-57CB5C793979}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;&#xA;truncate table conform_riskman.INCIDENT_TYPE_FACT&#xA;&#xA;truncate table conform_riskman.INCIDENT_ACTION_FACT&#xA;&#xA;truncate table &#x9;conform_riskman.INCIDENT_HISTORY_FACT&#xA;&#xA;delete from  conform_riskman.incident_fact&#xA;&#xA;----below code is for setting the primary key on 1&#xA;DBCC CHECKIDENT ('conform_riskman.incident_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{040B5D39-5A2F-4412-8CDD-BC9ECB0CECCF}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{4FC6685D-0384-460F-97F3-82006DA160C0}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{31B9FD34-4D84-4336-B9B7-E799548A4269}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="&#xA;&#xA; --populate new data &#xA; insert into conform_riskman.incident_fact&#xA; select &#xA;  t1.id&#xA; ,t1.BaseID&#xA; ,t1.DisplayID&#xA; --,(select employee_key from conform_riskman.employee_dim where given_name='-' and current_row_indicator='Y') --default employee_key&#xA; ,(select person_key from conform_riskman.person_dim where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.IncidentDate) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateDeleted) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; --,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateEntered)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_ini_date_key&#xA; , (select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_completed_date_key&#xA; ,t1.IncidentTime&#xA; , t1.Age&#xA; , left(t1.Outcome,20)&#xA; , left(t1.Status,20)&#xA;,left(t1.incident_location,50)&#xA; , left(t1.Program,50)&#xA; ,left( t1.IncidentInvolved ,50)&#xA; , case t1.Deceased &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA; , case t1.CoronerNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA;  , case t1.Autopsy &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA; , case t1.NextOfKinNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA;&#xA; , left(t1.NotificationReason,20)&#xA; , left(t1.TransferRequired,20)&#xA; ,left(t1.EmployeeSite,50)&#xA; ,left(t1.NatureOfInjury,50)&#xA; , left(t1.Description ,255)&#xA; , left(t1.StaffLostTimeHours,3)&#xA; , 'No' -------- defulat value for investigation_initiated&#xA; ,case t1.StaffWorkcoveNotif   when '0' then 'No' when '1' then 'Yes' else 'No' end as &#x9;safeworksa&#xA; ---,t1.StaffInjury&#xA;, case when len(t1.NatureOfInjury)&lt;&gt;0  then 'Yes' else 'No' end&#xA; ,'No'  -------- defulat value for preventative_corrective_action_required&#xA;    ,'No'  -------- defulat value for police_notified&#xA; ,'No'  -------- defulat value for fire_brigade_notified&#xA; ,'No'  -------- defulat value for ambulance__notified&#xA; ,'No'  -------- defulat value for human_services_notified&#xA; ,'No'  -------- defulat value for health_sa_notified&#xA; ,'No'  -------- defulat value for crisis_intervention_notified&#xA; ,'No'  -------- defulat value for carl_notified&#xA; ,'No'  -------- defulat value for ag_notified&#xA;    ,'No'  -------- defulat value for housing_regulator_notified&#xA; ,'No'  -------- defulat value for funder_notified&#xA;    ,'No'  -------- defulat value for parent_guardian_notified&#xA;,left(t1.detail,255)&#xA;,''&#xA;,'' &#xA;&#xA; from extract_riskman.IncidentsForReview  as t1&#xA; inner join&#xA; (select BaseID,max(SequenceNo) as SequenceNo&#xA; from extract_riskman.IncidentsForReview&#xA; group by  BaseID&#xA; ) as t2&#xA; on  t1.baseid = t2.baseid &#xA; and t1.SequenceNo=t2.SequenceNo&#xA;&#xA;&#xA;&#xA; --update   InvDate and InvestCompDate ,  investigation_initiatede,PHNotif,ACATNotif from ANGCARE_IFR&#xA; update t1&#xA; set   t1.investigation_initiated_date_key=d1.date_key&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvDate =d1.full_date&#xA;&#xA;&#xA; update t1&#xA; set   t1.cust_service=t2.custService, t1.customer_site=t2.customerSite&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA;&#xA;  update t1&#xA; set   t1.investigation_completed_date_key=d1.date_key&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvestCompDate =d1.full_date&#xA;&#xA; update t1&#xA; set   t1.investigation_initiated=(case t2.InvInit  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.health_sa_notified=(case t2.PHNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.crisis_intervention_notified=(case t2.ACATNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;  --update preventative_corrective_action_required from ch_ifr table&#xA;&#xA; update t1&#xA; set   t1.preventative_corrective_action_required=(case t2.CHPrevActReq  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.CH_IFR as t2  on t1.id=t2.CH_ID&#xA;&#xA; --update column based on  BEN_IFR&#xA;  update t1&#xA; set   t1.human_services_notified=(case t2.Vicdhs  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.BEN_IFR as t2  on t1.id=t2.ben_id&#xA;&#xA; --update columns based on  IncNotif_IFR table&#xA; update t1&#xA; set   t1.police_notified=(case t2.PoliceNotif  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;  update t1&#xA; set   t1.fire_brigade_notified=(case t2.FireNotif  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; &#xA;  update t1&#xA; set   t1.ambulance__notified=(case t2.AmbNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.carl_notified=(case t2.ChildAbuseNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;&#xA;    update t1&#xA; set   t1.ag_notified=(case t2.AGNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;     update t1&#xA; set   t1.housing_regulator_notified=(case t2.HouseReg  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;  &#xA;     update t1&#xA; set   t1.funder_notified=(case t2.Funder  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;      update t1&#xA; set   t1.parent_guardian_notified=(case t2.GuardNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; --update person_key  &#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.incident_fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from  extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  ---and f1.DateOfBirth=d1.date_of_birth&#xA;  )  as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;  /*-----------update logged_by_employee_key&#xA;  --frist: based on firstname and last name&#xA;  update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.userdisplayname = d1.given_name+' '+d1.family_name&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;    update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.userdisplayname = d1.preferred_name+' '+d1.family_name&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;  --based on email:&#xA;&#xA;      update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.email = d1.street_email1&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;  */&#xA;&#xA;-------------------------------------------------------populate org structure------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--populate program_key&#xA;&#xA;/*&#xA;&#xA;   --if site is null just use incident_location&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.incident_location&#xA;  where f1.Site is null &#xA;  and f2.site is null&#xA;  and f2.program_key is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;   --if site is not null use site and incident_location&#xA;&#xA; update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.incident_location&#xA;  and f1.Site=f2.site&#xA;  where f1.Site is not null &#xA;  and f2.site is not null&#xA;  and f2.program_key is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;*/&#xA;&#xA;-------------------------------------------------------------------------------------------------------------Org mapping using four ways-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;---------------------------------------------------------------------------------WAY1: using  ANGCARE_IFR.CustService---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--changed by JS at 23/05/2017 based on table- ANGCARE_IFR.CustService&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------------------------------------WAY2: using  IncidentsForReview.EmployeeSite -----------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='IncidentsForReview'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;   from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;-------------------------------------------------------WAY3: CustomerSite------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='CustomerSite' and  f2.value1 is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;-------------------------------------------------------WAY4: incident_location------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='Incident_Location' and  f2.value1 is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{2F26A17B-9B64-4147-B83A-BBBCF0BC296B}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{F4354257-5065-4160-9952-A3BD012D2F77}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{DF90D777-E23A-4B77-AA89-3253E1028F23}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{16A62578-72C3-4A18-A994-0AFA96C1102D}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{0A3FF8D6-B3C9-43DB-826B-AA3409A1A92E}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{1FCE1C1C-7184-4747-8E75-9C523C2D1C2A}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{E85ED4B0-760B-483B-A76C-D79EA17A6DAC}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{088A7AF3-4079-49D7-B610-B9A26E6503EB}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 INCIDENT_HISTORY_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{225863C5-3AEE-4A96-B499-8EF8A49B0AAD}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table  conform_riskman.INCIDENT_HISTORY_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{00B0FEA9-ADA3-4049-A984-AAF32A9817C6}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_HISTORY_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{6D248FD6-0AB5-4B1F-AE7D-514D18102955}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_HISTORY_FACT'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{53748B1F-43C8-48C3-A280-1B684FDCE2D8}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1DA74E81-CE08-4382-B667-2D3CE3D0D5B8}"
                  SQLTask:SqlStatementSource="insert into    conform_riskman.INCIDENT_HISTORY_FACT   &#xA;select &#xA;isnull(ttt.employee_key,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') ),&#xA;&#xA;f1.incident_key&#x9;  ,&#xA;isnull(ttt.employee_key,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') ),&#xA;t1.DateEntered&#x9;&#x9; &#xA;&#xA;from    extract_riskman.IncidentsForReview&#x9; as t1&#xA;left join conform_riskman.incident_fact as f1 on t1.baseid =f1.base_id&#xA;left join&#xA;&#xA; ( &#xA;  select  distinct  g1.id, d1.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;  on  g1.username = d1.AD_UserID&#xA; &#xA; ) as ttt&#xA; on t1.id=ttt.ID&#xA;&#xA;&#xA;&#xA;&#xA;--update manager_key&#xA;&#xA;update &#x9;tt1&#xA;set tt1.manager_key=tt2.employee_key&#xA;from conform_riskman.INCIDENT_HISTORY_FACT  as tt1&#xA;inner join&#xA;(&#xA;select&#x9;g1.*,i1.employee_key as manager_key&#xA;from &#xA;(&#xA;select t1.employee_key,t1.id_number,k1.manager_id_number &#xA;from conform_riskman.employee_dim as t1&#xA;left join &#xA;(select f1.employee_key,&#xA;       d1.id_number as employee_id_number,&#xA;       f1.manager_key &#x9;,&#xA;&#x9;   d2.id_number as manager_id_number&#xA;from conform.employee_position_fact as f1&#xA;left join conform.employee_dim as d1 on f1.employee_key=d1.employee_key &#x9;and d1.current_row_indicator='Y'&#xA;left join conform.employee_dim as d2 on f1.manager_key=d2.employee_key &#x9;and d2.current_row_indicator='Y'&#xA;where f1.primary_position_flag='P'&#xA;) as k1 on t1.id_number =k1.employee_id_number and t1.current_row_indicator='Y'&#xA;) as g1&#xA;left join conform_riskman.employee_dim as i1 on g1.manager_id_number=i1.id_number and i1.current_row_indicator='Y'&#xA;) as tt2&#xA;on tt1.employee_key=tt2.employee_key&#xA;and tt2.manager_key is not null" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{F6DB1E67-A3C9-4EB0-9234-C0725DDFC3FC}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{9A2F8A47-1C1F-4A4F-9F66-3DCE138F59C5}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{43DC2B7E-D400-456B-8C73-5DCA92D5B51A}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{62FCDD99-2AAC-4298-9AB5-34D570A445AA}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{26E6BA2F-4AA6-45C3-82F0-CB0A09E2CCFC}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{B92DE964-98A6-46B2-B1C9-009BD164B691}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{E85ED4B0-760B-483B-A76C-D79EA17A6DAC}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{9B4F9797-4DA5-4C03-ACA0-3F22598B21A0}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{B79C9D3A-F5DE-4BDD-8C48-0B0A863BC4E7}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{2E6DE89F-0F2D-4314-ABAA-1557500F6A09}"
          DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{EBC3C931-1809-4923-9821-3277A79711CE}"
          DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:Value="2" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{A1D627BF-6BE7-42F5-9F55-CB056B103F74}"
      DTS:EventID="1701257339"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{C97C6788-BF75-4126-9155-3A9347742040}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="382,329"
          Size="382,372"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          TopLeft="19.0000000000002,1301.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="382,329"
          Size="382,372"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          TopLeft="19.0000000000001,869.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          TopLeft="5.50000000000006,5.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          TopLeft="5.50000000000009,437.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          TopLeft="5.50000000000026,1733.5" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint]"
          TopLeft="210,377.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 1]"
          TopLeft="210,809.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 2]"
          TopLeft="210,1241.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 3]"
          TopLeft="210,1673.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="420,2161"
          Size="420,2204"
          Id="Package\Sequence Container - Fact Tables"
          TopLeft="34.5,1" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>