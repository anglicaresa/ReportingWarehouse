<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/23/2016 2:19:29 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W7PC01XQ1T"
  DTS:CreatorName="ANGLICARE-SA\jshen"
  DTS:DTSID="{CCD1442F-A88C-42D6-81EF-D0DBFB5EB43A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.107"
  DTS:LocaleID="3081"
  DTS:ObjectName="Conform_RiskMan_Fact - DEV"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="661"
  DTS:VersionGUID="{EDF4367C-86F4-499E-A5C7-B6D1E12AC34E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[devsql-1\whouse.DWHB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
      DTS:ObjectName="devsql-1\whouse.DWHB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=devsql-1\whouse;Initial Catalog=DWHB;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D9171BDE-8638-46C2-BCA8-282F32F48C91}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="anniversary_date_key">
      <DTS:VariableValue
        DTS:DataType="3">9999999</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{35B5F04A-AB46-4E7D-A819-2F1AE215CD0D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_code_new">
      <DTS:VariableValue
        DTS:DataType="8">N</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{550E917C-FE27-4347-A566-044E71484F06}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_code_update">
      <DTS:VariableValue
        DTS:DataType="8">U</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D9DBE83D-5210-425D-99A5-7453E4FD1CA9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_description_new">
      <DTS:VariableValue
        DTS:DataType="8">NEW</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{01B2D5C1-D4DA-4E24-81F4-DA98AC8A4164}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_description_update">
      <DTS:VariableValue
        DTS:DataType="8">UPDATE</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{33B72EDF-737C-4D6C-BCD4-5CB11C9CA6B2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="current_row_indicator">
      <DTS:VariableValue
        DTS:DataType="8">Y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{17D8DAEF-0702-47F4-AC94-BA9DDB305203}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="etl_start_date">
      <DTS:VariableValue
        DTS:DataType="7">12/4/2019 9:55:54 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9ED3CCF1-5B9E-4C31-B85D-D2DB32AD7A36}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="manager_pos_key">
      <DTS:VariableValue
        DTS:DataType="3">1694</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B0CF5A8B-105B-46D1-879D-E69BCEDB6C9A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="manger_key">
      <DTS:VariableValue
        DTS:DataType="3">1780</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5E9F3E47-F4B7-4F5B-B88C-F23A108DD8F0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="new_position_flag">
      <DTS:VariableValue
        DTS:DataType="8">Y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EF2265BB-7D06-4B9D-817A-3C4608148049}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="position_vacant_date_key">
      <DTS:VariableValue
        DTS:DataType="3">9999999</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{424BCF32-1A58-472A-8F9E-2B1986E767D2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="row_effective_date">
      <DTS:VariableValue
        DTS:DataType="7">12/4/2019 9:55:54 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9D4A82AD-AA31-4ACB-8B77-27A1D9DEB1CF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="row_expiration_date">
      <DTS:VariableValue
        DTS:DataType="7">12/4/2019 9:55:54 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AB33D928-E3AC-4F60-BF4E-8ED4780A6F47}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="survery_completed">
      <DTS:VariableValue
        DTS:DataType="8">NO</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Sequence Container - Fact Tables"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{3F07DA7A-A22E-4021-9A6A-E8210D4DBFBC}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container - Fact Tables">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{5b891649-5e0d-4a16-992a-5bb2a27050ea}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="ContributingFactors_fact">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{ebc24018-95ea-491c-b945-7034e21f5acd}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table  conform_riskman.ContributingFactors_fact" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{35808405-0861-4f50-b838-1677797ad1aa}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.ContributingFactors_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{5a49adbb-2a45-4da1-a5d3-79f3aa1af510}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.ContributingFactors_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{9ab3db0f-afed-43d8-befc-a093b2635c85}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource=" insert into conform_riskman.ContributingFactors_fact(id,CFactorGroup,CFactor)&#xA; select a.id,a.CFactorGroup,a.CFactor&#xA; from extract_riskman.tblContributingFactors_IFR as a ;&#xA;&#xA; update t1&#xA; set t1.display_id=t2.DisplayID&#xA; from conform_riskman.ContributingFactors_fact as t1&#xA; inner join &#xA; ( select a.id,a.DisplayID&#xA; from extract_riskman.IncidentsForReview as a&#xA; inner join&#xA; (&#xA; select DisplayID,max(sequenceno) as sequenceno&#xA;  from extract_riskman.IncidentsForReview&#xA;  where SubModule='Incidents'&#xA;  group by DisplayID&#xA;  ) as b &#xA;  on  a.SubModule='Incidents' and a.DisplayID=b.DisplayID&#xA;  and a.SequenceNo=b.sequenceno&#xA;  ) as t2&#xA; on t1.id = t2.id &#xA;&#xA;&#xA;&#xA; delete from conform_riskman.ContributingFactors_fact where display_id is NULL ;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{6440e8e3-dbbd-465c-9530-ddbb22f91259}"
              DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{f473625c-63a9-4779-964c-b5f089a0e392}"
              DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{1b9fc915-9f73-4bdd-9dce-17fbdfd63fa6}"
              DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{78128fcc-a6e4-4d46-ab02-58bca4fb5ae8}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{4b128d8a-d830-460e-90bc-064d2e17d85b}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{a7ce893c-9047-4c98-a5a7-1cd8e9e61f65}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{7443e704-d299-4914-80fc-28040bdb112e}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="INCIDENT_ACTION_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{89984a77-029e-432d-9d56-b2cbc1f8d461}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="truncate table conform_riskman.INCIDENT_ACTION_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{4b2aa37e-c01b-4543-8796-cc03c6520425}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_action_bridge'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{901e16e5-101f-415d-8f37-436968e7480c}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_ACTION_FACT'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{f3d53293-0709-4649-b824-d6475f690971}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="&#xA;IF OBJECT_ID('tempdb..#action_temp') IS NOT NULL drop table #action_temp;&#xA;&#xA;create table #action_temp&#xA;(batchid int,&#xA; pca varchar(255),&#xA; spca varchar(500),&#xA; due_date date,&#xA; com_date date&#xA; )&#xA;&#xA; create clustered index idx_riskman_temp_batchid on #action_temp(batchid);&#x9;&#x9; &#xA;&#xA; IF OBJECT_ID('tempdb..#action_temp_pca') IS NOT NULL drop table  #action_temp_pca&#xA;create table  #action_temp_pca&#xA;(batchid int,&#xA; action varchar(255)&#xA; )&#xA; &#xA; create clustered index idx_riskman_temp_pca_batchid on #action_temp_pca(batchid);&#x9;&#x9; &#xA;&#xA; IF OBJECT_ID('tempdb..#action_spca') IS NOT NULL drop table #action_temp_spca &#xA; create table  #action_temp_spca &#xA;(batchid int,&#xA; action varchar(500)&#xA; )&#xA;  create clustered index idx_riskman_temp_spca_batchid on #action_temp_spca(batchid);&#x9;&#x9;&#xA;&#xA;IF OBJECT_ID('tempdb..#action_ddate') IS NOT NULL  drop table #action_temp_ddate&#xA; create table #action_temp_ddate &#xA;(batchid int,&#xA; vdate datetime&#xA; )&#xA;   create clustered index idx_riskman_temp_ddadte_batchid on #action_temp_ddate(batchid);&#x9;&#x9;&#xA;&#xA;&#xA; IF OBJECT_ID('tempdb..#action_cdate') IS NOT NULL   drop table  #action_temp_cdate &#xA;  create table #action_temp_cdate &#xA;(batchid int,&#xA; vdate datetime&#xA; )&#xA;&#xA; create clustered index idx_riskman_temp_cdadte_batchid on #action_temp_cdate(batchid);&#x9;&#x9;&#xA; &#xA; --populate preventative_corrective_action&#xA; insert into #action_temp_pca&#xA; select distinct BatchID, left(ValueString,255)&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAPrevCorAct'&#xA;&#xA; --populate specific_preventative_corrective_action&#xA; insert into #action_temp_spca&#xA; select distinct BatchID, left(ValueString,500)&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAPrevCorActOth'&#xA; &#xA;  --populate action_due_date&#xA; insert into #action_temp_ddate&#xA; select distinct BatchID,  ValueDate&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAActImpDate'&#xA;     &#xA; --populate action_completed_date&#xA; insert into #action_temp_cdate&#xA; select distinct BatchID,  ValueDate&#xA; from extract_riskman.FRM_DATA &#xA;  where fieldname ='PCAActComDate'&#xA;&#xA;&#xA; --populate preventative_corrective_action&#xA; insert into #action_temp (batchid, pca)&#xA; select distinct BatchID, action&#xA; from #action_temp_pca&#xA;&#xA; --populate specific_preventative_corrective_action&#xA; update t1&#xA; set t1.spca = t2.action&#xA; from #action_temp as t1&#xA; inner join #action_temp_spca &#x9;as t2 on t1.batchid=t2.BatchID&#xA; &#xA;  --populate action_due_date&#xA; update t1&#xA; set t1.due_date = convert(date,t2.vdate)&#xA; from #action_temp as t1&#xA; inner join #action_temp_ddate  t2 on t1.batchid=t2.BatchID &#xA;&#xA;   --populate action_completed_date&#xA; update t1&#xA; set t1.com_date = convert(date,t2.vdate)&#xA; from #action_temp as t1&#xA; inner join #action_temp_cdate  t2 on t1.batchid=t2.BatchID &#xA; where t2.vdate is not null&#xA;&#xA;&#xA;insert into conform_riskman.INCIDENT_ACTION_FACT&#xA;  select &#xA;  f1.incident_key,&#xA;  m.action_key&#xA;  from conform_riskman.incident_fact as f1&#xA;  inner join&#xA;&#xA;  (&#xA;&#xA;&#x9;  select &#xA;&#x9;    n2.CH_ID,&#xA;&#x9;&#x9;n1.action_key&#xA;&#x9;  from &#xA;&#xA;&#x9;  (&#xA;&#xA;&#x9;&#x9; select g1.*,&#xA;&#x9;&#x9;   ISNULL(dd1.action_key,(select action_key from  conform_riskman.action_dim where current_row_indicator='Y' and preventative_corrective_action='No Action Type'))  as action_key&#xA;&#x9;&#x9; from #action_temp as g1&#xA;&#x9;&#x9; left join &#xA;&#x9;&#x9; (&#xA;&#x9;&#x9;  select dd1.* &#xA;&#x9;&#x9;  from &#x9;conform_riskman.action_dim  as dd1&#xA;&#x9;&#x9;  inner join&#xA;&#x9;&#x9;&#x9; (&#xA;&#x9;&#x9;&#x9;  select preventative_corrective_action,specific_preventative_corrective_action,action_due_date,action_completed_date ,max(action_key) as action_key&#xA;&#x9;&#x9;&#x9; from conform_riskman.action_dim &#xA;&#x9;&#x9;&#x9; where current_row_indicator='Y' &#xA;&#x9;&#x9;&#x9; group by preventative_corrective_action,specific_preventative_corrective_action,action_due_date,action_completed_date &#xA;&#x9;&#x9;&#x9; ) &#x9;   as d1 &#xA;&#x9;&#x9;&#x9;on dd1.action_key=d1.action_key&#xA;&#x9;&#x9;  ) as dd1&#xA;&#x9;&#x9; on g1.pca=dd1.preventative_corrective_action  &#xA;&#x9;&#x9; and g1.spca =dd1.specific_preventative_corrective_action &#xA;&#x9;&#x9; and g1.due_date=dd1.action_due_date &#xA;&#x9;&#x9; and g1.com_date=dd1.action_completed_date &#xA;&#xA;&#x9;   ) as n1&#xA;&#x9;   inner join &#xA;&#x9;   (    select f1.ch_id, f1.PCARECID,f1.PCAPrevRECID,f2.KeyData,f3.RecordID,f3.BatchID&#xA;&#x9;&#x9; from extract_riskman.CH_IFR   as f1&#xA;&#x9;&#x9; inner join  extract_riskman.FRM_RECORD as f2 on f1.PCAPrevRECID=f2.KeyData&#xA;&#x9;&#x9; inner join &#x9; extract_riskman.FRM_BATCH&#x9; as f3 on f2.RecordID=f3.RecordID&#xA;      ) as n2 &#xA;&#x9;  on n1.batchid=n2.BatchID&#xA;&#xA;&#x9;  ) as m&#xA;&#x9;  on f1.id=m.CH_ID&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;----new method from VIEW changed by JS at 20/06/2017&#xA;&#xA;&#xA;  insert into conform_riskman.INCIDENT_ACTION_FACT&#xA;  select &#xA;  f1.incident_key,&#xA;  isnull(f2.action_key ,( select action_key from conform_riskman.action_dim&#x9; where preventative_corrective_action like 'No Action Type%'   and current_row_indicator='Y'))&#xA;  from conform_riskman.incident_fact as f1&#xA;  inner join conform_riskman.action_dim as f2&#xA;  on f1.id=f2.ch_id&#xA;&#xA;&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{7dcb29ee-a3c3-4ee2-aed2-882358ca2252}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{e3fbebaa-737e-44ae-914f-33c191ee1830}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{a9a4c1e4-999b-4398-8275-e4a8b7e0080d}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{5bf58cad-7a80-44fa-a4e9-cb7e5a575b7c}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{8b75493a-fe96-4a25-8b10-39171b548caa}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{31aa0825-11d4-4ef2-a318-40bf455916e2}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{b65cf5b5-c018-4059-9a09-669300e9c8ba}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="INCIDENT_TYPE_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{df5f7044-2011-4d68-861a-b7004e58c3d5}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="truncate table conform_riskman.INCIDENT_TYPE_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{e47cd150-4cb8-4edc-bd1c-39d9e51de8dc}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_TYPE_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{519d7f4a-d95d-488f-8a74-f20e7ca454d0}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_TYPE_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{10ebf5cf-3539-4b27-9da7-349c87d5061c}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="--process definitions is not null&#xA; insert into   conform_riskman.INCIDENT_TYPE_FACT&#xA; select &#xA; f1.incident_key,&#xA; isnull(g1.incident_type_key, (select incident_type_key from conform_riskman.incident_type_dim  where current_row_indicator='Y' and super_group='No Incident Type' ))&#xA; from  conform_riskman.incident_fact as f1&#xA; inner join  &#xA; (&#xA;&#x9;  select t1.id, d1.incident_type_key&#xA;&#x9;  from &#x9;extract_riskman.IncidentClassificationsIFR as t1&#xA;&#x9;  inner join  conform_riskman.incident_type_dim as d1&#xA;&#x9;  on &#x9;  left(t1.Supergroup,50) =d1.super_group&#xA;       and left(t1.IncidentClass,50) =d1.incident_class&#xA;       and t1.Definitions is not NULL&#xA;&#x9;   and d1.definitions is not null&#xA;&#x9;   and left(t1.Definitions,50) = d1.definitions&#x9;&#x9; &#xA;&#xA; ) as g1&#xA; on f1.id=g1.ID&#xA;&#xA; --process definitions is  null&#xA; insert into   conform_riskman.INCIDENT_TYPE_FACT&#xA; select &#xA; f1.incident_key,&#xA; isnull(g1.incident_type_key, (select incident_type_key from conform_riskman.incident_type_dim  where current_row_indicator='Y' and super_group='No Incident Type' ))&#xA; from  conform_riskman.incident_fact as f1&#xA; inner join  &#xA; (&#xA;&#x9;  select t1.id, d1.incident_type_key&#xA;&#x9;  from &#x9;extract_riskman.IncidentClassificationsIFR as t1&#xA;&#x9;  inner join  conform_riskman.incident_type_dim as d1&#xA;&#x9;  on &#x9;  left(t1.Supergroup,50) =d1.super_group&#xA;       and left(t1.IncidentClass,50) =d1.incident_class&#xA;       and t1.Definitions is  NULL&#xA;&#x9;   and d1.definitions is  null&#xA;&#x9;  &#xA;&#xA; ) as g1&#xA; on f1.id=g1.ID" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{72571ca7-3d65-4af8-94aa-5902faa1b99a}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{4e14fcdc-4ae4-435b-ad14-50068afdf18d}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{804b6f40-c013-478b-9697-ca983076b5aa}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{9d086bbe-910e-4346-ba95-03de9281f611}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{01cb21ff-17db-4594-b9b9-dc6f9bcb9d44}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{66e73b0c-7ea8-4bcb-936d-778807d7337e}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{31479d6b-ef68-4a0d-92ba-d144243fbafd}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - FEEDBACK_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{d7a0ece4-d8f0-40db-bbe3-8f5349f989d0}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="&#xA;&#xA;truncate table conform_riskman.feedback_fact;&#xA;&#xA;truncate table conform_riskman.Feedback_issue_fact;&#xA;&#xA;----below code is for setting the primary key on 1&#xA;DBCC CHECKIDENT ('conform_riskman.feedback_fact', reseed, 1)&#xA;&#xA;&#xA;DBCC CHECKIDENT ('conform_riskman.Feedback_issue_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{f18396df-0ebe-4ae7-9e11-8ff6c7fb26fb}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.feedback_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{27161a0c-8dbd-4248-a08f-33f57a890d52}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.feedback_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{70951d4f-a133-4f7a-ad11-9f9c159d5a63}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="use dwhb &#xA;&#xA; --------------------------Step1: populate basic information------------------------------------------------------------&#xA; insert into conform_riskman.feedback_fact&#xA; ([ID],&#xA;Base_id,&#xA;[DisplayID],&#xA;IncidentInvolved,&#xA;person_key,&#xA;portfolio_key,&#xA;service_stream_key,&#xA;program_key,&#xA;closed_date_key,&#xA;incident_date_key,&#xA;notified_date_key,&#xA;age,&#xA;severity,&#xA;status,&#xA;location,&#xA;detail,&#xA;AdditionalRef,&#xA;[Site],&#xA;[Incident_Location],&#xA;[Outcome],&#xA;InvestigationFinding,&#xA;[Comment]&#xA; &#xA; )&#xA; select &#xA;  t1.id&#xA; ,t1.BaseID&#xA; ,t1.DisplayID&#xA; ,t1.IncidentInvolved&#xA; ,(select person_key from conform_riskman.person_dim where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.IncidentDate) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; , t1.Age&#xA; , t1.Outcome&#xA; , t1.Status&#xA;,left(t1.incident_location,50)&#xA;,t1.Detail&#xA;,t1.AdditionalRef&#xA;,t1.Site&#xA;,t1.Incident_Location&#xA;,t1.Outcome&#xA;,t1.InvestigationsFinding&#xA;,t1.Comment&#xA;&#xA; from extract_riskman.IncidentsForReview  as t1&#xA; inner join&#xA; (select BaseID,max(SequenceNo) as SequenceNo&#xA; from extract_riskman.IncidentsForReview&#xA; where SubModule='RMFeedback'&#xA; group by  BaseID&#xA; ) as t2&#xA; on  t1.baseid = t2.baseid &#xA; and t1.SequenceNo=t2.SequenceNo&#xA; and t1.SubModule='RMFeedback'&#xA;&#xA; --------------------------Step2: get other information------------------------------------------------------------&#xA;  update t1&#xA; set   t1.FBModeRecieved=t2.FBModeReceived&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.FBRelateClient=(case t2.FBRelateClient  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;  update t1&#xA; set   t1.FBRelateStaff=(case t2.FBRelateStaff  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;&#xA;  update t1&#xA; set   t1.FBAssocInc=(case t2.FBAssocInc  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.FBCompStatus=t2.FBCompStatus&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;    update t1&#xA; set   t1.FBCompStatusOther=t2.FBCompStatusOther&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;&#xA; &#xA;    update t1&#xA; set   t1.[FBCompAnon]=(case t2.[FBCompAnon]  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;     update t1&#xA; set   t1.[FBCompRelationship]=t2.[FBCompRelationship]&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;&#xA;   update t1&#xA; set   t1.[FBAckDate]=t2.[FBAckDate]&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;    update t1&#xA; set   t1.FBFirstFormalDate=t2.FBFirstFormalDate&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;     update t1&#xA; set   t1.FBIsClosed=(case t2.FBIsClosed  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail1_IFR] as t2  on t1.id=t2.FBDetail1_ID&#xA;&#xA;&#xA;     update t1&#xA; set   t1.FBOutcome=t2.FBOutcome&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA;&#xA;      update t1&#xA; set   t1.FBObjectives=t2.FBObjectives&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA;&#xA; &#xA;      update t1&#xA; set   t1.FBExtAgency=(case t2.FBExtAgency  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA;&#xA;&#xA;       update t1&#xA; set   t1.FBExtAgencyName=t2.FBExtAgencyName&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA; --------------------------Step3: Update KEYs------------------------------------------------------------&#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.Feedback_Fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from  extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  and f1.SubModule='RMFeedback'&#xA;  ---and f1.DateOfBirth=d1.date_of_birth&#xA;  )  as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;&#xA;-------------------------------------------------------------------------------------------------------------Org mapping using four ways-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;---------------------------------------------------------------------------------WAY1: using  ANGCARE_IFR.CustService---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--changed by JS at 23/05/2017 based on table- ANGCARE_IFR.CustService&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.Feedback_Fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID and f1.SubModule='RMFeedback'&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.Feedback_Fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------------------------------------WAY2: using  IncidentsForReview.EmployeeSite -----------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='IncidentsForReview'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;   from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;    and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;-------------------------------------------------------WAY3: CustomerSite------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='CustomerSite' and  f2.value1 is not null&#xA;and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;&#xA;-------------------------------------------------------WAY4: incident_location------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='Incident_Location' and  f2.value1 is not null&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;--Add in 12 June by FW&#xA;--Update Employee_key column&#xA;&#xA; update t1&#xA; set   t1.employee_key=t2.employee_key&#xA; from conform_riskman.Feedback_Fact as t1&#xA; inner join&#xA; (&#xA;&#x9;&#x9;  select distinct fff.id,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; fff.employee_key&#xA;&#x9;&#x9; from &#xA;&#x9;&#x9; (&#xA;&#x9;&#x9;  select  distinct  g1.id, d1.employee_key&#xA;&#x9;&#x9;&#x9;  from  extract_riskman.IncidentsForReview as g1&#xA;&#x9;&#x9;&#x9;  inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;&#x9;&#x9;  on  g1.username = d1.AD_UserID&#x9; &#xA;&#x9;&#x9;   union&#xA;&#x9;&#x9;&#x9;  select  distinct  g1.id, d1.employee_key&#xA;&#x9;&#x9;&#x9;  from  extract_riskman.IncidentsForReview as g1&#xA;&#x9;&#x9;&#x9;  inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;&#x9;&#x9;  on  g1.username = d1.user_id&#xA;&#x9;&#x9;   union&#xA;&#x9;&#x9;&#x9;&#x9;select f1.id,f3.employee_key &#xA;&#x9;&#x9;&#x9;&#x9;from  extract_riskman.IncidentsForReview  as f1&#xA;&#x9;&#x9;&#x9;&#x9;inner join extract_riskman.UserProfile as f2  on f1.username =f2.username &#xA;&#x9;&#x9;&#x9;&#x9;inner join conform_riskman.employee_dim as f3 on f2.LDAP_Username=f3.AD_UserID&#xA;&#x9;&#x9; ) as fff&#xA;&#x9;) as t2&#xA;  on t1.id=t2.ID;&#xA;  &#xA;  --if not found just fill with NO_EMPLOYEE_KEY&#xA;   update t1&#xA; set   t1.employee_key=(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') &#xA; from conform_riskman.Feedback_Fact as t1&#xA; where t1.employee_key is null;&#xA;&#xA; &#xA;&#xA;-------------step4:  populate  Feedbak_issue_fact tables ---------------------------&#xA;insert into conform_riskman.Feedback_Issue_Fact&#xA;select&#xA;Displayid&#xA;,f.FBIssueId&#xA;,f.FBIssueGroup&#xA;,f.FBIssue&#xA;,f.FBIssueNotes&#xA;from extract_riskman.vwReg_RMFeedback r inner join extract_riskman.vwSF_FBIssue f on r.FBIssuePrevRECID=f.Keydata&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Update for RLS"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{D51350D4-A3A1-481B-83B6-88993A7D8868}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Update for RLS"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="--update rls_progam&#xA;update conform_riskman.feedback_fact&#xA;set rls_progam=site;&#xA;&#xA;--update rls_service join with management.rls_riskman_programs&#xA;&#xA;update t1&#xA;set t1.rls_service = t2.[Service_Stream],&#xA;    t1.rls_portfolio= t2.[Portfolio]&#xA;from conform_riskman.feedback_fact as t1&#xA;inner join [az-sqlbi01].appdev.riskman.rls_riskman_programs as t2&#xA;on t1.rls_progam= t2.[ServicesPrograms]&#xA;&#xA;-- update lication&#xA;update conform_riskman.feedback_fact&#xA;set location='Not Specified'&#xA;where location is null;&#xA;&#xA;-----------start to update role for each line---------------------------------------------&#xA;--if have multiple roles, use commma to seperate&#xA;&#xA;DECLARE @role varchar(255);&#xA;DECLARE @sqls varchar(max);&#xA;DECLARE @tsql varchar(max);&#xA;&#xA;update conform_riskman.feedback_fact&#xA;set rls_role =NULL;&#xA;&#xA;DECLARE c_sqls CURSOR FOR SELECT [Role],[SQL_Conversion] from [az-sqlbi01].appdev.riskman.rls_riskman_SQLs where [ALL_Flag] is null and [Role] is not null and role not in ('Customer ACS','HS Maintenance') ORDER BY [Role] asc;&#xA;open c_sqls;&#xA; FETCH NEXT FROM c_sqls INTO @role,@sqls;&#xA;&#xA;&#xA;  WHILE @@FETCH_STATUS =0&#xA;  BEGIN&#xA;&#xA;&#x9;set @tsql ='update conform_riskman.feedback_fact '+&#xA;        &#x9;'set rls_role= case   when rls_role is NULL then '+''''+ @role+''''+' else rls_role+'+''''+','+''''+'+'+''''+@role+''''+' end '&#xA;&#x9;        +'where ('+@sqls+');';&#xA;   execute( @tsql);&#xA;   --print @tsql;&#xA;&#xA;&#xA;FETCH NEXT FROM c_sqls   INTO  @role,@sqls;&#xA;  END &#xA;  CLOSE c_sqls ;&#xA;  DEALLOCATE c_sqls;&#xA;&#xA;&#xA;&#xA;  --special roles&#xA;  --Customer ACS&#xA;  update conform_riskman.feedback_fact&#xA;  set rls_role = &#xA;    case &#xA;&#x9;when rls_role is NULL then 'Customer ACS'&#xA;&#x9;else rls_role + ',Customer ACS'&#xA;&#x9;end&#xA;  where  (rls_portfolio = 'Aged Care Services'  or &#xA;(&#xA; rls_service = 'Other Service'&#xA; and &#xA;(location = 'Westbourne Park'&#xA; or  location = 'Elizabeth East'&#xA; or  location = 'Grange'&#xA; or  location = 'Trott Park'&#xA; or  location = 'Brompton'&#xA; or  location = 'Elizabeth Dutton Court'&#xA; or  location = 'All Hallows Mews'&#xA; or  location = 'Grandview Heights'&#xA; or  location = 'Dutton Mews' )))&#xA;&#xA;&#xA; --HS Maintenance&#xA;   update conform_riskman.feedback_fact&#xA;  set rls_role = &#xA;    case &#xA;&#x9;when rls_role is NULL then 'HS Maintenance'&#xA;&#x9;else rls_role + ',HS Maintenance'&#xA;&#x9;end&#xA;  where  (( rls_progam = 'Property Maintenance Services'  or  &#xA; rls_progam = 'Sorting Centre'  or  &#xA; rls_progam = 'Re-use Recycling Program' ))&#xA;&#xA;  ----------------------------------process multiple roles--------------------------------------------&#xA; --1 comma&#xA;&#xA; update conform_riskman.feedback_fact&#xA; set rls_role1 = left(rls_role,CHARINDEX(',',rls_role)-1),&#xA;     rls_role2 = right(rls_role,len(rls_role) -CHARINDEX(',',rls_role))&#xA; where (len(rls_role) - len(replace(rls_role,',',''))) / LEN(',') &gt;0&#xA;&#xA; --2 commas&#xA;  update conform_riskman.feedback_fact&#xA; set rls_role2 = left(rls_role2,CHARINDEX(',',rls_role2)-1),&#xA;     rls_role3 = right(rls_role2,len(rls_role2) -CHARINDEX(',',rls_role2))&#xA; where (len(rls_role2) - len(replace(rls_role2,',',''))) / LEN(',') &gt;0&#xA;&#xA; --3 commas&#xA;&#xA;   update conform_riskman.feedback_fact&#xA; set rls_role3 = left(rls_role3,CHARINDEX(',',rls_role3)-1),&#xA;     rls_role4 = right(rls_role3,len(rls_role3) -CHARINDEX(',',rls_role3))&#xA; where (len(rls_role3) - len(replace(rls_role3,',',''))) / LEN(',') &gt;0&#xA;&#xA;  --4 commas&#xA;     update conform_riskman.feedback_fact  set rls_role4 = left(rls_role4,CHARINDEX(',',rls_role4)-1), rls_role5 = right(rls_role4,len(rls_role4) -CHARINDEX(',',rls_role4))&#xA; where (len(rls_role4) - len(replace(rls_role4,',',''))) / LEN(',') &gt;0" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{77c8f3c4-065c-4518-8d6a-063a1ee71e93}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{ad20e51e-5283-4012-9095-b9ce65ad1e15}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{732CC25D-0303-416B-B4A8-E23554D8B3BF}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Update for RLS" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{3F49CB2C-F509-4E6F-8727-BB58441968FC}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Update for RLS"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{b182fd66-20ce-4658-894d-948b69164e85}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{a9282fd7-3ad9-4221-a6f4-affd68792d69}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{827ec107-e85e-4132-a8c0-4a211fe99497}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:Disabled="True"
          DTS:DTSID="{01BF9DD8-4E66-45F6-8B51-CA3140F251EA}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - INCIDENT_FACT -- keep all records and with bridge tables">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{5301CE0E-19A4-4B0E-9E39-6E80AA253E0E}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table conform_riskman.incident_type_bridge&#xA;truncate table conform_riskman.incident_action_bridge&#xA;delete from conform_riskman.incident_fact" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{F3879AD3-8096-4FB9-AD9F-3B46BF5D8A8F}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{7E758419-FCEE-4035-95BA-B5F2587F9FFF}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{41B0D9E3-5438-447A-BF18-4A20B260CC68}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource=" --delete old data&#xA;delete from  conform_riskman.incident_fact&#xA; --populate new data &#xA; insert into conform_riskman.incident_fact&#xA; select &#xA;  id&#xA; ,BaseID&#xA; ,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') --default employee_key&#xA; ,(select person_key from conform_riskman.person_dim&#x9;where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim&#x9;where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim&#x9;where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim&#x9;where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = IncidentDate)&#x9;,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateDeleted)&#x9;,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateEntered)&#x9; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_ini_date_key&#xA; , (select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_completed_date_key&#xA; ,IncidentTime&#xA; , Age&#xA; , left(Outcome,20)&#xA; , left(Status,20)&#xA; , left(Program,50)&#xA; , case IncidentInvolved &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),IncidentInvolved)&#xA;    end&#xA;&#xA; , case Deceased &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),Deceased)&#xA;    end&#xA; , case CoronerNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),CoronerNotified)&#xA;    end&#xA;&#xA;  , case Autopsy &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),Autopsy)&#xA;    end&#xA;&#xA; , case NextOfKinNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),NextOfKinNotified)&#xA;    end&#xA;&#xA;&#xA;&#x9;, left(NotificationReason,20)&#xA;&#x9;, left(TransferRequired,20)&#xA;&#x9;,left(EmployeeSite,50)&#xA;&#x9;,left(NatureOfInjury,50)&#xA;&#x9;, left(Description ,255)&#xA;&#x9;, left(StaffLostTimeHours,3)&#xA;&#x9;, 'No' -------- defulat value for investigation_initiated&#xA;&#x9;,StaffWorkcoveNotif&#xA;&#x9;,StaffInjury&#xA;&#x9;,'No'  -------- defulat value for preventative_corrective_action_required&#xA;    ,'No'  -------- defulat value for police_notified&#xA;&#x9;,'No'  -------- defulat value for fire_brigade_notified&#xA;&#x9;,'No'  -------- defulat value for ambulance__notified&#xA;&#x9;,'No'  -------- defulat value for human_services_notified&#xA;&#x9;,'No'  -------- defulat value for health_sa_notified&#xA;&#x9;,'No'  -------- defulat value for crisis_intervention_notified&#xA;&#x9;,'No'  -------- defulat value for carl_notified&#xA;&#x9;,'No'  -------- defulat value for ag_notified&#xA;    ,'No'  -------- defulat value for housing_regulator_notified&#xA;&#x9;,'No'  -------- defulat value for funder_notified&#xA;    ,'No'  -------- defulat value for parent_guardian_notified&#xA; from extract_riskman.IncidentsForReview &#xA;&#xA;&#xA;&#xA; --update   InvDate&#x9;and InvestCompDate&#x9;,  investigation_initiatede,PHNotif,ACATNotif&#x9;from ANGCARE_IFR&#xA; update t1&#xA; set   t1.investigation_initiated_date_key=d1.date_key&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvDate =d1.full_date&#xA;&#xA;  update t1&#xA; set   t1.investigation_completed_date_key=d1.date_key&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvestCompDate =d1.full_date&#xA;&#xA; update t1&#xA; set   t1.investigation_initiated=(case t2.InvInit&#x9; when '0' then 'No' when '1' then 'Yes' else  convert(varchar(3), t2.InvInit) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.health_sa_notified=(case t2.PHNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.PHNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.crisis_intervention_notified=(case t2.ACATNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.ACATNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;  --update preventative_corrective_action_required from ch_ifr table&#xA;&#xA; update t1&#xA; set   t1.preventative_corrective_action_required=(case t2.CHPrevActReq&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.CHPrevActReq) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.CH_IFR as t2&#x9; on t1.id=t2.CH_ID&#xA;&#xA; --update column based on &#x9;BEN_IFR&#xA;  update t1&#xA; set   t1.human_services_notified=(case t2.Vicdhs&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.Vicdhs) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.BEN_IFR as t2&#x9; on t1.id=t2.ben_id&#xA;&#xA; --update columns based on &#x9;IncNotif_IFR table&#xA; update t1&#xA; set   t1.police_notified=(case t2.PoliceNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.PoliceNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;  update t1&#xA; set   t1.fire_brigade_notified=(case t2.FireNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.FireNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; &#xA;  update t1&#xA; set   t1.ambulance__notified=(case t2.AmbNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.AmbNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.carl_notified=(case t2.ChildAbuseNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.ChildAbuseNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;&#xA;    update t1&#xA; set   t1.ag_notified=(case t2.AGNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.AGNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;     update t1&#xA; set   t1.housing_regulator_notified=(case t2.HouseReg&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.HouseReg) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;  &#xA;     update t1&#xA; set   t1.funder_notified=(case t2.Funder&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.Funder) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;      update t1&#xA; set   t1.parent_guardian_notified=(case t2.GuardNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.GuardNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; --update person_key&#x9; &#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.incident_fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from &#x9;extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  and f1.DateOfBirth=d1.date_of_birth&#xA;  )&#x9; as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;  -----------update logged_by_employee_key&#xA;  --frist: based on firstname and last name&#xA;  update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.userdisplayname = d1.given_name+' '+d1.family_name&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;    update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.userdisplayname = d1.preferred_name+' '+d1.family_name&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;  --based on email:&#xA;&#xA;      update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.email = d1.street_email1&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;-------------------------------------------------------populate org structure------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--populate program_key&#xA;&#xA;   --if site is null just use incident_location&#xA;   update t1&#xA;   set &#x9; t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;&#x9; select f1.id,f1.baseid,f2.program_key&#xA;&#x9; from extract_riskman.IncidentsForReview &#x9;as f1&#xA;&#x9; inner join  conform_riskman.program_mapping as f2&#xA;&#x9; on f1.Incident_Location=f2.incident_location&#xA;&#x9; where f1.Site is null &#xA;&#x9; and f2.site is null&#xA;&#x9; and f2.program_key is not null&#xA;&#xA;&#x9;) as t2&#xA;&#x9;on t1.id =t2.id &#xA;&#x9;and t1.base_id=t2.BaseID&#xA;&#xA;   --if site is not null use site and incident_location&#xA;&#xA;&#x9;update t1&#xA;   set &#x9; t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;&#x9; select f1.id,f1.baseid,f2.program_key&#xA;&#x9; from extract_riskman.IncidentsForReview &#x9;as f1&#xA;&#x9; inner join  conform_riskman.program_mapping as f2&#xA;&#x9; on f1.Incident_Location=f2.incident_location&#xA;&#x9; and f1.Site=f2.site&#xA;&#x9; where f1.Site is not null &#xA;&#x9; and f2.site is not null&#xA;&#x9; and f2.program_key is not null&#xA;&#xA;&#x9;) as t2&#xA;&#x9;on t1.id =t2.id &#xA;&#x9;and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from &#x9; conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA;&#x9;n1.incident_key,&#xA;&#x9;n1.program_name,&#xA;&#x9;n1.service_stream_name,&#xA;&#x9;n1.portfolio_name,&#xA;&#x9;dd1.service_stream_key,&#xA;&#x9;dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select &#x9; g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select &#x9;f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code&#x9;, d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{9A5124C7-256E-41A9-87F6-62486EB281EE}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{296E7060-C6E7-4544-93B2-713C3F34A3CD}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{A47CE230-1E1D-4360-8A57-70EAC75A0C1E}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{DABC7BB5-25F2-4B93-B4DB-1607996CF151}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{76D808F6-172D-4CDF-B3A3-FFDC7CACC624}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{BCFD069E-DC97-4D9A-AD2B-37AAB56B7BC3}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{94ed87e7-f4d5-4be9-8fdf-3efbc23ef736}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - INCIDENT_FACT -- Keep one record for one incident">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{8c5b8525-98a2-491d-8e83-cada9af26f2a}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;&#xA;truncate table conform_riskman.INCIDENT_TYPE_FACT&#xA;&#xA;truncate table conform_riskman.INCIDENT_ACTION_FACT&#xA;&#xA;truncate table &#x9;conform_riskman.INCIDENT_HISTORY_FACT&#xA;&#xA;delete from  conform_riskman.incident_fact&#xA;&#xA;----below code is for setting the primary key on 1&#xA;DBCC CHECKIDENT ('conform_riskman.incident_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{be56b18c-138a-4d07-a49b-e08539a70fa8}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{cd7323b3-5075-4068-a414-7440032a984c}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{de996072-3bcc-4556-8825-ada6e8523c3e}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="use dwhb;&#xA; --populate new data &#xA; insert into conform_riskman.incident_fact&#xA; select &#xA;  t1.id&#xA; ,t1.BaseID&#xA; ,t1.DisplayID&#xA; --,(select employee_key from conform_riskman.employee_dim where given_name='-' and current_row_indicator='Y') --default employee_key&#xA; ,(select person_key from conform_riskman.person_dim where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.IncidentDate) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateDeleted) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; --,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateEntered)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_ini_date_key&#xA; , (select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_completed_date_key&#xA; ,t1.IncidentTime&#xA; , t1.Age&#xA; , left(t1.Outcome,20)&#xA; , left(t1.Status,20)&#xA;,left(t1.incident_location,50)&#xA; , left(t1.Program,50)&#xA; ,left( t1.IncidentInvolved ,50)&#xA; , case t1.Deceased &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA; , case t1.CoronerNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA;  , case t1.Autopsy &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA; , case t1.NextOfKinNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA;&#xA; , left(t1.NotificationReason,20)&#xA; , left(t1.TransferRequired,20)&#xA; ,left(t1.EmployeeSite,50)&#xA; ,left(t1.NatureOfInjury,50)&#xA; , left(t1.Description ,255)&#xA; , left(t1.StaffLostTimeHours,3)&#xA; , 'No' -------- defulat value for investigation_initiated&#xA; ,case t1.StaffWorkcoveNotif   when '0' then 'No' when '1' then 'Yes' else 'No' end as &#x9;safeworksa&#xA; ---,t1.StaffInjury&#xA;, case when len(t1.NatureOfInjury)&lt;&gt;0  then 'Yes' else 'No' end&#xA; ,'No'  -------- defulat value for preventative_corrective_action_required&#xA;    ,'No'  -------- defulat value for police_notified&#xA; ,'No'  -------- defulat value for fire_brigade_notified&#xA; ,'No'  -------- defulat value for ambulance__notified&#xA; ,'No'  -------- defulat value for human_services_notified&#xA; ,'No'  -------- defulat value for health_sa_notified&#xA; ,'No'  -------- defulat value for crisis_intervention_notified&#xA; ,'No'  -------- defulat value for carl_notified&#xA; ,'No'  -------- defulat value for ag_notified&#xA;    ,'No'  -------- defulat value for housing_regulator_notified&#xA; ,'No'  -------- defulat value for funder_notified&#xA;    ,'No'  -------- defulat value for parent_guardian_notified&#xA;,left(t1.detail,255)&#xA;,''&#xA;,'' &#xA;,site&#xA;,'No'-- ChCCUNotif added at 29/01/2018 by JS,&#xA;,'No'&#xA;,'No'&#xA;,'No'&#xA;,'No'&#xA;,'No'&#xA;,'No'&#xA;,'No'&#xA;,'No'&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;,NULL&#xA;&#xA;&#xA; from extract_riskman.IncidentsForReview  as t1&#xA; inner join&#xA; (select BaseID,max(SequenceNo) as SequenceNo&#xA; from extract_riskman.IncidentsForReview&#xA; group by  BaseID&#xA; ) as t2&#xA; on  t1.baseid = t2.baseid &#xA; and t1.SequenceNo=t2.SequenceNo&#xA;&#xA;&#xA;&#xA; --update   InvDate and InvestCompDate ,  investigation_initiatede,PHNotif,ACATNotif from ANGCARE_IFR&#xA; update t1&#xA; set   t1.investigation_initiated_date_key=d1.date_key&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvDate =d1.full_date&#xA;&#xA;&#xA; update t1&#xA; set   t1.cust_service=t2.custService, t1.customer_site=t2.customerSite&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA;&#xA;  update t1&#xA; set   t1.investigation_completed_date_key=d1.date_key&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvestCompDate =d1.full_date&#xA;&#xA; update t1&#xA; set   t1.investigation_initiated=(case t2.InvInit  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.health_sa_notified=(case t2.PHNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.crisis_intervention_notified=(case t2.ACATNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;  --update preventative_corrective_action_required from ch_ifr table&#xA;&#xA; update t1&#xA; set   t1.preventative_corrective_action_required=(case t2.CHPrevActReq  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.CH_IFR as t2  on t1.id=t2.CH_ID&#xA;&#xA; --update column based on  BEN_IFR&#xA;  update t1&#xA; set   t1.human_services_notified=(case t2.Vicdhs  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.BEN_IFR as t2  on t1.id=t2.ben_id&#xA;&#xA; --update columns based on  IncNotif_IFR table&#xA; update t1&#xA; set   t1.police_notified=(case t2.PoliceNotif  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;  update t1&#xA; set   t1.fire_brigade_notified=(case t2.FireNotif  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; &#xA;  update t1&#xA; set   t1.ambulance__notified=(case t2.AmbNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.carl_notified=(case t2.ChildAbuseNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;&#xA;    update t1&#xA; set   t1.ag_notified=(case t2.AGNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;     update t1&#xA; set   t1.housing_regulator_notified=(case t2.HouseReg  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;  &#xA;     update t1&#xA; set   t1.funder_notified=(case t2.Funder  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;      update t1&#xA; set   t1.parent_guardian_notified=(case t2.GuardNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; -- update ChCCUNotif&#xA; update t1&#xA; set t1.ChCCUNotif='Yes'&#xA;  from  conform_riskman.incident_fact as t1&#xA;  inner join extract_riskman.CAbuse_IFR as t2&#xA;  on t1.id = t2.cabuse_id&#xA;  and t2.ChCCUNotif=1&#xA;&#xA;&#xA;  -- update some fileds&#xA;  -- added by JS at 15/11/2018&#xA;  --PoliceNotification&#xA;--- existnig....&#xA;&#xA;&#xA;update conform_riskman.incident_fact&#xA;set police_notified=NULL;&#xA;&#xA;update t1&#xA;set t1.police_notified='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join  extract_riskman.[CAbuse_IFR] as t2 on t1.ID = t2.CAbuse_ID&#xA;left join  extract_riskman.[AC_IFR] as t4 on t1.ID = t4.AC_ID&#xA;left join  extract_riskman.[IncNotif_IFR] as t5 on t1.id=t5.IncNotif_ID&#xA;Where &#xA;CHPolNotif = '1' or&#xA;Police = '1' or&#xA;PoliceNotif = '1'&#xA;&#xA;update conform_riskman.incident_fact&#xA;set police_notified='No'&#xA;where police_notified is NULL&#xA;&#xA;&#xA;&#xA;update t1&#xA;set t1.DoctorNotified='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[AC_IFR] as t4 on t1.ID = t4.AC_ID&#xA;Where &#xA;GPNotified = '1'&#xA;&#xA;&#xA;update t1&#xA;set t1.DepartmentofHealthNotification='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[AC_IFR] as t4 on t1.ID = t4.AC_ID&#xA;Where &#xA;ACDOHANotif = '1';&#xA;&#xA;&#xA;update t1&#xA;set t1.DepartmentofEducation='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[IncNotif_IFR] as t5 on t1.id= t5.IncNotif_ID&#xA;Where &#xA;DECDCareNotif = '1';&#xA;&#xA;update t1&#xA;set t1.OtherNotification='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[IncNotif_IFR] as t5 on t1.id= t5.IncNotif_ID&#xA;Where &#xA;OtherNotif = '1';&#xA;&#xA;update t1&#xA;set t1.EmergencyContact='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[IncNotif_IFR] as t5 on t1.id= t5.IncNotif_ID&#xA;Where &#xA;EmergContNotif = '1';&#xA;&#xA;update t1&#xA;set t1.CorrectionsOfficerNotified='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[IncNotif_IFR] as t5 on t1.id= t5.IncNotif_ID&#xA;Where &#xA;CorrOffNotif = '1';&#xA;&#xA;&#xA;update t1&#xA;set t1.InjurySustained='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;left join extract_riskman.[AC_IFR] as t2 on t2.AC_ID = t1.ID&#xA;Where &#xA;InjurySust = '1';&#xA;&#xA;update t1&#xA;set t1.CustomerTransferRequired='Yes'&#xA;from conform_riskman.incident_fact as t1&#xA;Where t1.transfer_location is not NULL&#xA;;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA; --update person_key  &#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.incident_fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from  extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  ---and f1.DateOfBirth=d1.date_of_birth&#xA;  )  as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;  /*-----------update logged_by_employee_key&#xA;  --frist: based on firstname and last name&#xA;  update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.userdisplayname = d1.given_name+' '+d1.family_name&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;    update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.userdisplayname = d1.preferred_name+' '+d1.family_name&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;  --based on email:&#xA;&#xA;      update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.email = d1.street_email1&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;  */&#xA;&#xA;-------------------------------------------------------populate org structure------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--populate program_key&#xA;&#xA;/*&#xA;&#xA;   --if site is null just use incident_location&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.incident_location&#xA;  where f1.Site is null &#xA;  and f2.site is null&#xA;  and f2.program_key is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;   --if site is not null use site and incident_location&#xA;&#xA; update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.incident_location&#xA;  and f1.Site=f2.site&#xA;  where f1.Site is not null &#xA;  and f2.site is not null&#xA;  and f2.program_key is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;*/&#xA;&#xA;-------------------------------------------------------------------------------------------------------------Org mapping using four ways-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;---------------------------------------------------------------------------------WAY1: using  ANGCARE_IFR.CustService---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--changed by JS at 23/05/2017 based on table- ANGCARE_IFR.CustService&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;---------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;----------------------------------------WAY2: using  IncidentsForReview.EmployeeSite -----------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='IncidentsForReview'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;   from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;----------Step3: update CustomerSite type = Portfolio&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;-------------------------------------------------------WAY3: CustomerSite------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='CustomerSite' and  f2.value1 is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;-------------------------------------------------------WAY4: incident_location------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='Incident_Location' and  f2.value1 is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Update for RLS"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{99436F1B-741F-4910-8C81-F7B6BDD98575}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Update for RLS"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="------------------------------------------------RLS-------------------------------------------------------------------------------------------------------------------------------------------------&#xA;--added by JS at 28.11.2019&#xA;&#xA;update  conform_riskman.incident_fact&#xA;set rls_progam =&#xA;            case [incident_involved]&#xA;            when 'Customer' then cust_service&#xA;             --when  'Employee/Volunteer' then &#xA;             --when  'Agency Staff' then [Main_Program_of_Employment]&#xA;             -- when  'Contractor' then [Main_Program_of_Employment]&#xA;             when 'Service' then service_service&#xA;             else     'No Service Indicated'&#xA;end &#xA;--update rls_service join with management.rls_riskman_programs&#xA;&#xA;update t1&#xA;set t1.rls_service = t2.[Service_Stream],&#xA;    t1.rls_portfolio= t2.[Portfolio]&#xA;from conform_riskman.incident_fact as t1&#xA;inner join [az-sqlbi01].appdev.riskman.rls_riskman_programs as t2&#xA;on t1.rls_progam= t2.[ServicesPrograms]&#xA;&#xA;--- update roles&#xA;DECLARE @role varchar(255);&#xA;DECLARE @sqls varchar(max);&#xA;DECLARE @tsql varchar(max);&#xA;update conform_riskman.incident_fact&#xA;set rls_role =NULL;&#xA;&#xA;DECLARE c_sqls CURSOR FOR SELECT [Role],[SQL_Conversion] from [az-sqlbi01].appdev.riskman.rls_riskman_SQLs where [ALL_Flag] is null and [Role] is not null ORDER BY [Role] asc;&#xA;open c_sqls;&#xA; FETCH NEXT FROM c_sqls INTO @role,@sqls;&#xA;&#xA;&#xA;  WHILE @@FETCH_STATUS =0&#xA;  BEGIN&#xA;&#xA;&#x9;set @tsql ='update conform_riskman.incident_fact '+     &#x9;'set rls_role= case   when rls_role is NULL then '+''''+ @role+''''+' else rls_role+'+''''+','+''''+'+'+''''+@role+''''+' end '&#xA;&#x9;        +'where ('+@sqls+');';&#xA;   execute( @tsql);&#xA;&#xA;FETCH NEXT FROM c_sqls   INTO  @role,@sqls;&#xA;  END &#xA;  CLOSE c_sqls ;&#xA;  DEALLOCATE c_sqls;&#xA;----------------------------------process multiple roles--------------------------------------------&#xA; --1 comma&#xA;&#xA; update conform_riskman.incident_fact&#xA; set rls_role1 = left(rls_role,CHARINDEX(',',rls_role)-1),&#xA;     rls_role2 = right(rls_role,len(rls_role) -CHARINDEX(',',rls_role))&#xA; where (len(rls_role) - len(replace(rls_role,',',''))) / LEN(',') &gt;0&#xA;&#xA; --2 commas&#xA;  update conform_riskman.incident_fact&#xA; set rls_role2 = left(rls_role2,CHARINDEX(',',rls_role2)-1),&#xA;     rls_role3 = right(rls_role2,len(rls_role2) -CHARINDEX(',',rls_role2))&#xA; where (len(rls_role2) - len(replace(rls_role2,',',''))) / LEN(',') &gt;0&#xA;&#xA; --3 commas&#xA;&#xA;   update conform_riskman.incident_fact&#xA; set rls_role3 = left(rls_role3,CHARINDEX(',',rls_role3)-1),&#xA;     rls_role4 = right(rls_role3,len(rls_role3) -CHARINDEX(',',rls_role3))&#xA; where (len(rls_role3) - len(replace(rls_role3,',',''))) / LEN(',') &gt;0&#xA;&#xA;  --4 commas&#xA;     update conform_riskman.incident_fact  set rls_role4 = left(rls_role4,CHARINDEX(',',rls_role4)-1), rls_role5 = right(rls_role4,len(rls_role4) -CHARINDEX(',',rls_role4))&#xA; where (len(rls_role4) - len(replace(rls_role4,',',''))) / LEN(',') &gt;0&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{92db9ddb-46da-430b-bb39-d1d66ad49ce8}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{b75c5b6d-1a4f-48fa-96a4-070abd40f00e}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{577C0FDF-5F95-41D5-94FC-3AD2F88E14E9}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Update for RLS" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{3FB7190B-8986-4137-9DD9-567D3C646D46}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Update for RLS"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{e943c396-1ee1-455a-868c-f711a3d55bba}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{59fb28bc-993b-40c0-8ea4-ec39fd9529a2}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{4ba8c436-0982-4c1d-8d10-989822a223a9}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{022bdb37-be96-4b21-97c1-3513306fab3c}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - pressure_injury_fact">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{009669b9-fd43-4a44-b850-0d49b5344379}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete and Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="&#xA; truncate table conform_riskman.pressure_injury_fact;&#xA;&#xA;go&#xA;&#xA;insert into [conform_riskman].[pressure_injury_fact]&#xA;([incident_id]&#xA;      ,[location_on_body]&#xA;      ,[other_location]&#xA;      ,[stage_of_pressure_injury]&#xA;      ,[care_setting]&#xA;      ,[other_care_setting]&#xA;      ,[other_site]&#xA;      ,[how_developed])&#xA;  select &#xA;r.Displayid as 'Incident ID',&#xA;f.BodyLocation as 'Location on body',&#xA;f.OtherDetail as 'Other location', &#xA;f.UlcerStage as 'Stage of pressure injury', &#xA;f.CareSetting as 'Care setting where injury developed',&#xA;f.CareSettingOther as 'Other care setting', &#xA;f.CareSettingOtherSite as 'Other Site',&#xA;f.HowDeveloped as 'How pressure injury developed'&#xA;&#xA;from extract_riskman.vwReg_Incidents  r &#xA;inner join extract_riskman.[vwSF_PressureUlcer] f on r.PrevRecID2=f.Keydata" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{a17e0d71-f86d-4d35-b604-d1d0045d0c71}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.pressure_injury_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{c0e28b7f-151c-49dd-a52e-1088d9d434ee}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.pressure_injury_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{F28FDF2F-4AB7-425C-A5E5-F24F7C4C03A0}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{976199e3-bfcf-476a-9226-f06c511f4c43}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{cde80283-83f9-4ab6-a52e-7d33860a7b12}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{027d96c2-56c5-41bd-8a2e-2bd4616cfdaf}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{dec61fe8-d832-4bf6-8b8d-b4c2db882f75}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{ecf690d7-8330-4b35-b735-91a54e40bba8}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - SKINTEAR_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{864e2348-ee96-4e16-9701-5edcc69cbb76}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="&#xA;&#xA;truncate table conform_riskman.skintear_fact;&#xA;&#xA;&#xA;DBCC CHECKIDENT ('conform_riskman.skintear_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{4429c503-c68e-4a8d-aa4e-0c6e888f8bb5}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.skintear_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{611ae570-0f6b-42b5-acfa-662faf5e6faa}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.skintear_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{e5e7a9da-e0ce-48be-ab06-d3097f74f2e7}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="insert into conform_riskman.SkinTear_Fact&#xA;select r.Displayid &#xA;, f.STBodyLocation &#xA;, f.STOtherDetail &#xA;, f.STCategory &#xA;, f.STCareSetting &#xA;, f.STCareSettingOther&#xA;, f.STCareSettingOtherSite&#xA;, f.STHowDeveloped &#xA;,r.id&#xA;from extract_riskman.vwReg_Incidents r &#xA;inner join extract_riskman.[vwSF_SkinTear] f on r.STPrevRECID=f.Keydata&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{99753b09-15f4-4b2b-bee5-2f33049b27f4}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{ab44215e-ba0a-4b80-bbfb-bb1deb71bedb}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{1ba33395-5ec6-40d9-b361-5433a0886880}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{40647207-d9e7-4290-a3c5-caf902ec9067}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{e187b62a-a500-4616-afd4-3a5b3fa9114a}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{172f0d9a-8db0-4129-9b2e-b0d0f40f80a8}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{13e76938-0a7c-4841-8f02-a9f3cbf2be22}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 INCIDENT_HISTORY_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{5091da05-f855-4534-a14e-9660238e9117}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table  conform_riskman.INCIDENT_HISTORY_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{e1dda5b4-1c9d-44af-a62c-665867754dad}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_HISTORY_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{8f717c0c-178b-4e4b-b189-84b5473b5f5d}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_HISTORY_FACT'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{978eced7-c47a-41ec-894c-5732cc11410a}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                  SQLTask:SqlStatementSource="insert into    conform_riskman.INCIDENT_HISTORY_FACT   &#xA;select &#xA;isnull(ttt.employee_key,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') ),&#xA;&#xA;f1.incident_key&#x9;  ,&#xA;isnull(ttt.employee_key,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') ),&#xA;t1.DateEntered&#x9;&#x9; &#xA;&#xA;from    extract_riskman.IncidentsForReview&#x9; as t1&#xA;left join conform_riskman.incident_fact as f1 on t1.baseid =f1.base_id&#xA;left join&#xA;&#xA; ( &#xA; select distinct fff.id,&#xA;                 fff.employee_key&#xA; from &#xA; (&#xA;  select  distinct  g1.id, d1.employee_key&#xA;      from  extract_riskman.IncidentsForReview as g1&#xA;      inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;  on  g1.username = d1.AD_UserID&#x9; &#xA;   union&#xA;      select  distinct  g1.id, d1.employee_key&#xA;      from  extract_riskman.IncidentsForReview as g1&#xA;      inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;  on  g1.username = d1.user_id&#xA;   union&#xA;        select f1.id,f3.employee_key &#xA;&#x9;&#x9;from  extract_riskman.IncidentsForReview  as f1&#xA;&#x9;&#x9;inner join extract_riskman.UserProfile as f2  on f1.username =f2.username &#xA;&#x9;&#x9;inner join conform_riskman.employee_dim as f3 on f2.LDAP_Username=f3.AD_UserID&#xA; ) as fff&#xA; &#xA; ) as ttt&#xA; on t1.id=ttt.ID&#xA;&#xA;&#xA;--update manager_key&#xA;&#xA;update &#x9;tt1&#xA;set tt1.manager_key=tt2.employee_key&#xA;from conform_riskman.INCIDENT_HISTORY_FACT  as tt1&#xA;inner join&#xA;(&#xA;select&#x9;g1.*,i1.employee_key as manager_key&#xA;from &#xA;(&#xA;select t1.employee_key,t1.id_number,k1.manager_id_number &#xA;from conform_riskman.employee_dim as t1&#xA;left join &#xA;(select f1.employee_key,&#xA;       d1.id_number as employee_id_number,&#xA;       f1.manager_key &#x9;,&#xA;&#x9;   d2.id_number as manager_id_number&#xA;from conform.employee_position_fact as f1&#xA;left join conform.employee_dim as d1 on f1.employee_key=d1.employee_key &#x9;and d1.current_row_indicator='Y'&#xA;left join conform.employee_dim as d2 on f1.manager_key=d2.employee_key &#x9;and d2.current_row_indicator='Y'&#xA;where f1.primary_position_flag='P'&#xA;) as k1 on t1.id_number =k1.employee_id_number and t1.current_row_indicator='Y'&#xA;) as g1&#xA;left join conform_riskman.employee_dim as i1 on g1.manager_id_number=i1.id_number and i1.current_row_indicator='Y'&#xA;) as tt2&#xA;on tt1.employee_key=tt2.employee_key&#xA;and tt2.manager_key is not null" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{35fa78e7-4787-4420-9738-1d66446de8e9}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{c1413ff1-5d92-4050-8a0e-92c22e64f937}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{b57bb629-84f8-4412-8a3c-1846daf2ca0c}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{0bbf4a4e-b00c-48c0-a929-7359a32654df}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{96e447f5-0655-4fe0-936d-93f9807291f6}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{c9df87a8-7616-4658-9062-28017d2e5223}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\Update Incident_Location"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{4D48AFA8-98B1-45EB-8063-2111AF7206CD}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update Incident_Location"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
              SQLTask:SqlStatementSource="update extract_riskman.IncidentsForReview&#xA;set Incident_Location = &#xA;&#x9;case Incident_Location &#xA;&#x9;when 'All Hallows' then 'Westbourne Park'&#xA;&#x9;when 'AnglicareSA Westbourne Park' then 'Westbourne Park'&#xA;&#x9;when 'Canterbury Close' then 'Elizabeth East'&#xA;&#x9;when 'AnglicareSA Elizabeth East' then 'Elizabeth East'&#xA;&#x9;when 'Dutton Court' then 'Elizabeth Dutton Court'&#xA;&#x9;when 'Grandview Court' then 'Trott Park'&#xA;&#x9;when 'Ian George Court' then 'Brompton'&#xA;&#x9;when 'AnglicareSA Brompton' then 'Brompton'&#xA;&#x9;when 'St Laurences Court' then 'Grange'&#xA;&#x9;when 'AnglicareSA Grange' then 'Grange'&#xA;&#x9;when 'Allied Health Services, All Hallows' then 'Allied Health Services, Westbourne Park'&#xA;&#x9;when 'Allied Health Services, Westbourne Pk' then 'Allied Health Services, Westbourne Park'&#xA;&#x9;when 'Allied Health Services, St Laurences Court' then 'Allied Health Services, Grange'&#xA;&#x9;when 'St Mary''s with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;    when 'St Marys with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'OSH' then 'Outer Southern Hub'&#xA;&#x9;when 'Magdalene (St Lukes)' then 'Magdalene Centre - St Lukes'&#xA;&#x9;when 'OLD Extermal Location' then 'OLD External Location'&#xA;&#x9;else  Incident_Location&#xA;&#x9;end;&#xA;&#xA;&#xA;&#xA;update extract_riskman.vwReg_RMFeedback&#xA;set Incident_Location = &#xA;&#x9;case Incident_Location &#xA;&#x9;when 'All Hallows' then 'Westbourne Park'&#xA;&#x9;when 'AnglicareSA Westbourne Park' then 'Westbourne Park'&#xA;&#x9;when 'Canterbury Close' then 'Elizabeth East'&#xA;&#x9;when 'AnglicareSA Elizabeth East' then 'Elizabeth East'&#xA;&#x9;when 'Dutton Court' then 'Elizabeth Dutton Court'&#xA;&#x9;when 'Grandview Court' then 'Trott Park'&#xA;&#x9;when 'Ian George Court' then 'Brompton'&#xA;&#x9;when 'AnglicareSA Brompton' then 'Brompton'&#xA;&#x9;when 'St Laurences Court' then 'Grange'&#xA;&#x9;when 'AnglicareSA Grange' then 'Grange'&#xA;&#x9;when 'Allied Health Services, All Hallows' then 'Allied Health Services, Westbourne Park'&#xA;    when 'Allied Health Services, Westbourne Pk' then 'Allied Health Services, Westbourne Park'&#xA;&#x9;when 'Allied Health Services, St Laurences Court' then 'Allied Health Services, Grange'&#xA;&#x9;when 'St Mary''s with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'St Marys with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'OSH' then 'Outer Southern Hub'&#xA;&#x9;when 'Magdalene (St Lukes)' then 'Magdalene Centre - St Lukes'&#xA;&#x9;when 'OLD Extermal Location' then 'OLD External Location'&#xA;&#x9;else  Incident_Location&#xA;&#x9;end&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{CECF5606-0B6D-426C-97CB-518C59EF874C}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{435CDCB1-18D4-42CD-AB5E-9D78E81DA38F}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{F643E514-FC19-4DDB-81C6-E85EFB81F73B}"
          DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{BE2B1C16-B234-4186-9113-7C455AA7B5C5}"
          DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{65173488-4EEA-42FD-8A38-FFE51D5788EC}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{0C0C0646-B5A0-4F92-95D0-E8BC87E5D251}"
          DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{694D5D2D-9905-4B2B-8D66-73F5BD154D89}"
          DTS:From="Package\Sequence Container - Fact Tables\Update Incident_Location"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 8]"
          DTS:CreationName=""
          DTS:DTSID="{5FD78849-1715-4B7B-BE94-E35086A701A3}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 8"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="128" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          TopLeft="28,2165.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="382,329"
          Size="382,372"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          TopLeft="41.5000000000001,1301.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="382,329"
          Size="382,372"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          TopLeft="41.5,869.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Finish info"
          TopLeft="42.75,289" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data"
          TopLeft="29.75,158" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="150,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Update for RLS"
          TopLeft="115,217" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="164.25,200">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="100.75,38"
              Start="0,0"
              End="93.25,38">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34"
                    Point2="0,38"
                    Point3="4,38" />
                  <mssgle:LineSegment
                    End="93.25,38" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 3]"
          TopLeft="190,259">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-11.75,30"
              Start="0,0"
              End="-11.75,22.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,11" />
                  <mssgle:CubicBezierSegment
                    Point1="0,11"
                    Point2="0,15"
                    Point3="-4,15" />
                  <mssgle:LineSegment
                    End="-7.75,15" />
                  <mssgle:CubicBezierSegment
                    Point1="-7.75,15"
                    Point2="-11.75,15"
                    Point3="-11.75,19" />
                  <mssgle:LineSegment
                    End="-11.75,22.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,386"
          Size="409,429"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          TopLeft="28,2597.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info"
          TopLeft="32.75,216" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 2]"
          TopLeft="29.75,177">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="3,60"
              Start="0,0"
              End="-4.5,60">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,56" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,56"
                    Point2="-22.5,60"
                    Point3="-18.5,60" />
                  <mssgle:LineSegment
                    End="-4.5,60" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,280"
          Size="409,323"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          TopLeft="28,5.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info"
          TopLeft="33.75,283" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
          TopLeft="29.75,156" />
        <NodeLayout
          Size="263,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Update for RLS"
          TopLeft="25,220" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 2]"
          TopLeft="298.75,177">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-10.75,64"
              Start="0,0"
              End="-3.25,64">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="18.5,0"
                    Point2="22.5,0"
                    Point3="22.5,4" />
                  <mssgle:LineSegment
                    End="22.5,60" />
                  <mssgle:CubicBezierSegment
                    Point1="22.5,60"
                    Point2="22.5,64"
                    Point3="18.5,64" />
                  <mssgle:LineSegment
                    End="-3.25,64" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 3]"
          TopLeft="25,241">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="8.75,63"
              Start="0,0"
              End="1.25,63">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,59" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,59"
                    Point2="-22.5,63"
                    Point3="-18.5,63" />
                  <mssgle:LineSegment
                    End="1.25,63" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,380"
          Size="409,423"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          TopLeft="28,437.5" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data"
          TopLeft="29.75,158" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint]"
          TopLeft="165.25,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,101"
              Start="0,0"
              End="0,93.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,93.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,200">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,56"
              Start="0,0"
              End="0,48.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,353"
          Size="409,396"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact"
          TopLeft="34,3080.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data"
          TopLeft="29.75,158" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,200">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,56"
              Start="0,0"
              End="0,48.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,353"
          Size="409,396"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT"
          TopLeft="35,3552.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          TopLeft="28.0000000000002,1733.5" />
        <NodeLayout
          Size="399,42"
          Id="Package\Sequence Container - Fact Tables\Update Incident_Location"
          TopLeft="34.4999999999999,346" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint]"
          TopLeft="235.5,3026.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,54"
              Start="0,0"
              End="0,46.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 1]"
          TopLeft="28,649">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="13.5,406.5"
              Start="0,0"
              End="6.00000000000003,406.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,402.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,402.5"
                    Point2="-22.5,406.5"
                    Point3="-18.5,406.5" />
                  <mssgle:LineSegment
                    End="6.00000000000003,406.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-47.804453125,-17.609375,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 2]"
          TopLeft="232.5,1241.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 3]"
          TopLeft="232.5,1673.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 4]"
          TopLeft="232.5,2105.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 5]"
          TopLeft="232.5,2537.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 6]"
          TopLeft="233.25,388">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,49.5"
              Start="0,0"
              End="0,42">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 8]"
          TopLeft="239,3476.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,76"
              Start="0,0"
              End="0,68.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,68.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="501,4417"
          Size="501,4460"
          Id="Package\Sequence Container - Fact Tables"
          TopLeft="34.5,14" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>