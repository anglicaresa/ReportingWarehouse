<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/23/2016 2:19:29 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W7PC01XQ1T"
  DTS:CreatorName="ANGLICARE-SA\jshen"
  DTS:DTSID="{AA555C63-8CC9-4F34-A8A3-1A1A46657B87}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.101"
  DTS:LocaleID="3081"
  DTS:ObjectName="Conform_RiskMan_Fact - Prod"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="648"
  DTS:VersionGUID="{41036A1B-6AF8-4090-BC30-45CB2C5700BA}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[az-sqlbi01-dwhb]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
      DTS:ObjectName="az-sqlbi01-dwhb">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=az-sqlbi01;Initial Catalog=DWHB;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FFDCB130-54AA-415F-94D5-022D3E03A3C7}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="anniversary_date_key">
      <DTS:VariableValue
        DTS:DataType="3">9999999</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4AE6CD35-A1DE-4362-BC48-9974FABDAFCD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_code_new">
      <DTS:VariableValue
        DTS:DataType="8">N</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42874E79-FE8B-411C-A917-B5B4C5544AA9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_code_update">
      <DTS:VariableValue
        DTS:DataType="8">U</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E995EF7A-6FC0-46A6-811B-F242CD8AD203}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_description_new">
      <DTS:VariableValue
        DTS:DataType="8">NEW</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EB15F8D0-57D5-411F-8902-331BEE881602}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="change_reason_description_update">
      <DTS:VariableValue
        DTS:DataType="8">UPDATE</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{27D3A6F8-B44B-4FD8-BE3F-2FD698D696F6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="current_row_indicator">
      <DTS:VariableValue
        DTS:DataType="8">Y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{46725ED2-5D98-4697-9B1F-D52B35CD571D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="etl_start_date">
      <DTS:VariableValue
        DTS:DataType="7">6/12/2018 12:08:40 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1BC949A1-4919-45F0-8ADD-C8D7750738B1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="manager_pos_key">
      <DTS:VariableValue
        DTS:DataType="3">1694</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D2C6C324-27F5-4E22-AFE4-958ECDA0B018}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="manger_key">
      <DTS:VariableValue
        DTS:DataType="3">1780</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{40E63A90-B8A3-4AA6-A8E9-A5421DB3B3CB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="new_position_flag">
      <DTS:VariableValue
        DTS:DataType="8">Y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{31B5C6A0-02D2-4256-9F94-32E7436BA140}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="position_vacant_date_key">
      <DTS:VariableValue
        DTS:DataType="3">9999999</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7ABE681A-30CD-4248-96B2-D0736B7ACE5A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="row_effective_date">
      <DTS:VariableValue
        DTS:DataType="7">6/12/2018 12:08:40 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{04DE7685-6C76-4504-BF8C-18F34F83DAD5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="row_expiration_date">
      <DTS:VariableValue
        DTS:DataType="7">6/12/2018 12:08:40 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F029CA34-BD96-4CAD-A04C-0FCC1E7E2435}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="survery_completed">
      <DTS:VariableValue
        DTS:DataType="8">NO</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Sequence Container - Fact Tables"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{C6792B7E-9383-4BD2-864B-CF1B21333803}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container - Fact Tables">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{762e65e0-a8d4-46c5-bfc5-883fff532390}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="ContributingFactors_fact">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{637e2624-8e54-4e51-8795-2b8fffcb72f8}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table  conform_riskman.ContributingFactors_fact" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{8b830ba4-e76e-482a-9f0a-f568f7299cf3}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.ContributingFactors_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{37c25842-9a2a-4271-a244-b8b2ad1451a0}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.ContributingFactors_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{6d727d45-dca2-4c77-9677-7f135cae1a27}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource=" insert into conform_riskman.ContributingFactors_fact(id,CFactorGroup,CFactor)&#xA; select a.id,a.CFactorGroup,a.CFactor&#xA; from extract_riskman.tblContributingFactors_IFR as a ;&#xA;&#xA; update t1&#xA; set t1.display_id=t2.DisplayID&#xA; from conform_riskman.ContributingFactors_fact as t1&#xA; inner join &#xA; ( select a.id,a.DisplayID&#xA; from extract_riskman.IncidentsForReview as a&#xA; inner join&#xA; (&#xA; select DisplayID,max(sequenceno) as sequenceno&#xA;  from extract_riskman.IncidentsForReview&#xA;  where SubModule='Incidents'&#xA;  group by DisplayID&#xA;  ) as b &#xA;  on  a.SubModule='Incidents' and a.DisplayID=b.DisplayID&#xA;  and a.SequenceNo=b.sequenceno&#xA;  ) as t2&#xA; on t1.id = t2.id &#xA;&#xA;&#xA;&#xA; delete from conform_riskman.ContributingFactors_fact where display_id is NULL ;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{3680cba7-2799-47cb-bdb7-965d33d7bb68}"
              DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{33d3b9b7-12da-42bf-9948-c9bafd2ef489}"
              DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{3f3a4d94-6cb2-436c-9b7f-a71d343dc9f2}"
              DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{7e710c8a-17c5-4b72-908e-2131cad33b8e}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{85b92d5f-a3fe-4ce3-80f8-efd3bc1c1102}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{7508172d-d5eb-4c6b-b850-3e5e27a34bd1}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{17A0769E-5603-4672-BB44-FE93C2491EFA}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="INCIDENT_ACTION_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{DAA6D32A-EF6A-47A2-8F0E-A8C900512D5E}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="truncate table conform_riskman.INCIDENT_ACTION_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{A084C457-2E52-4D08-9418-67759A6B6CEB}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_ACTION_FACT'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{968BB344-997E-4627-B7AA-F602DF42B8B7}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_ACTION_FACT'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{DE25F530-CA53-4034-8B13-061BB15C759A}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="&#xA;IF OBJECT_ID('tempdb..#action_temp') IS NOT NULL drop table #action_temp;&#xA;&#xA;create table #action_temp&#xA;(batchid int,&#xA; pca varchar(255),&#xA; spca varchar(500),&#xA; due_date date,&#xA; com_date date&#xA; )&#xA;&#xA; create clustered index idx_riskman_temp_batchid on #action_temp(batchid);&#x9;&#x9; &#xA;&#xA; IF OBJECT_ID('tempdb..#action_temp_pca') IS NOT NULL drop table  #action_temp_pca&#xA;create table  #action_temp_pca&#xA;(batchid int,&#xA; action varchar(255)&#xA; )&#xA; &#xA; create clustered index idx_riskman_temp_pca_batchid on #action_temp_pca(batchid);&#x9;&#x9; &#xA;&#xA; IF OBJECT_ID('tempdb..#action_spca') IS NOT NULL drop table #action_temp_spca &#xA; create table  #action_temp_spca &#xA;(batchid int,&#xA; action varchar(500)&#xA; )&#xA;  create clustered index idx_riskman_temp_spca_batchid on #action_temp_spca(batchid);&#x9;&#x9;&#xA;&#xA;IF OBJECT_ID('tempdb..#action_ddate') IS NOT NULL  drop table #action_temp_ddate&#xA; create table #action_temp_ddate &#xA;(batchid int,&#xA; vdate datetime&#xA; )&#xA;   create clustered index idx_riskman_temp_ddadte_batchid on #action_temp_ddate(batchid);&#x9;&#x9;&#xA;&#xA;&#xA; IF OBJECT_ID('tempdb..#action_cdate') IS NOT NULL   drop table  #action_temp_cdate &#xA;  create table #action_temp_cdate &#xA;(batchid int,&#xA; vdate datetime&#xA; )&#xA;&#xA; create clustered index idx_riskman_temp_cdadte_batchid on #action_temp_cdate(batchid);&#x9;&#x9;&#xA; &#xA; --populate preventative_corrective_action&#xA; insert into #action_temp_pca&#xA; select distinct BatchID, left(ValueString,255)&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAPrevCorAct'&#xA;&#xA; --populate specific_preventative_corrective_action&#xA; insert into #action_temp_spca&#xA; select distinct BatchID, left(ValueString,500)&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAPrevCorActOth'&#xA; &#xA;  --populate action_due_date&#xA; insert into #action_temp_ddate&#xA; select distinct BatchID,  ValueDate&#xA; from extract_riskman.FRM_DATA &#xA; where fieldname ='PCAActImpDate'&#xA;     &#xA; --populate action_completed_date&#xA; insert into #action_temp_cdate&#xA; select distinct BatchID,  ValueDate&#xA; from extract_riskman.FRM_DATA &#xA;  where fieldname ='PCAActComDate'&#xA;&#xA;&#xA; --populate preventative_corrective_action&#xA; insert into #action_temp (batchid, pca)&#xA; select distinct BatchID, action&#xA; from #action_temp_pca&#xA;&#xA; --populate specific_preventative_corrective_action&#xA; update t1&#xA; set t1.spca = t2.action&#xA; from #action_temp as t1&#xA; inner join #action_temp_spca &#x9;as t2 on t1.batchid=t2.BatchID&#xA; &#xA;  --populate action_due_date&#xA; update t1&#xA; set t1.due_date = convert(date,t2.vdate)&#xA; from #action_temp as t1&#xA; inner join #action_temp_ddate  t2 on t1.batchid=t2.BatchID &#xA;&#xA;   --populate action_completed_date&#xA; update t1&#xA; set t1.com_date = convert(date,t2.vdate)&#xA; from #action_temp as t1&#xA; inner join #action_temp_cdate  t2 on t1.batchid=t2.BatchID &#xA; where t2.vdate is not null&#xA;&#xA;&#xA;insert into conform_riskman.INCIDENT_ACTION_FACT&#xA;  select &#xA;  f1.incident_key,&#xA;  m.action_key&#xA;  from conform_riskman.incident_fact as f1&#xA;  inner join&#xA;&#xA;  (&#xA;&#xA;&#x9;  select &#xA;&#x9;    n2.CH_ID,&#xA;&#x9;&#x9;n1.action_key&#xA;&#x9;  from &#xA;&#xA;&#x9;  (&#xA;&#xA;&#x9;&#x9; select g1.*,&#xA;&#x9;&#x9;   ISNULL(dd1.action_key,(select action_key from  conform_riskman.action_dim where current_row_indicator='Y' and preventative_corrective_action='No Action Type'))  as action_key&#xA;&#x9;&#x9; from #action_temp as g1&#xA;&#x9;&#x9; left join &#xA;&#x9;&#x9; (&#xA;&#x9;&#x9;  select dd1.* &#xA;&#x9;&#x9;  from &#x9;conform_riskman.action_dim  as dd1&#xA;&#x9;&#x9;  inner join&#xA;&#x9;&#x9;&#x9; (&#xA;&#x9;&#x9;&#x9;  select preventative_corrective_action,specific_preventative_corrective_action,action_due_date,action_completed_date ,max(action_key) as action_key&#xA;&#x9;&#x9;&#x9; from conform_riskman.action_dim &#xA;&#x9;&#x9;&#x9; where current_row_indicator='Y' &#xA;&#x9;&#x9;&#x9; group by preventative_corrective_action,specific_preventative_corrective_action,action_due_date,action_completed_date &#xA;&#x9;&#x9;&#x9; ) &#x9;   as d1 &#xA;&#x9;&#x9;&#x9;on dd1.action_key=d1.action_key&#xA;&#x9;&#x9;  ) as dd1&#xA;&#x9;&#x9; on g1.pca=dd1.preventative_corrective_action  &#xA;&#x9;&#x9; and g1.spca =dd1.specific_preventative_corrective_action &#xA;&#x9;&#x9; and g1.due_date=dd1.action_due_date &#xA;&#x9;&#x9; and g1.com_date=dd1.action_completed_date &#xA;&#xA;&#x9;   ) as n1&#xA;&#x9;   inner join &#xA;&#x9;   (    select f1.ch_id, f1.PCARECID,f1.PCAPrevRECID,f2.KeyData,f3.RecordID,f3.BatchID&#xA;&#x9;&#x9; from extract_riskman.CH_IFR   as f1&#xA;&#x9;&#x9; inner join  extract_riskman.FRM_RECORD as f2 on f1.PCAPrevRECID=f2.KeyData&#xA;&#x9;&#x9; inner join &#x9; extract_riskman.FRM_BATCH&#x9; as f3 on f2.RecordID=f3.RecordID&#xA;      ) as n2 &#xA;&#x9;  on n1.batchid=n2.BatchID&#xA;&#xA;&#x9;  ) as m&#xA;&#x9;  on f1.id=m.CH_ID&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;----new method from VIEW changed by JS at 20/06/2017&#xA;&#xA;&#xA;  insert into conform_riskman.INCIDENT_ACTION_FACT&#xA;  select &#xA;  f1.incident_key,&#xA;  isnull(f2.action_key ,( select action_key from conform_riskman.action_dim&#x9; where preventative_corrective_action like 'No Action Type%'   and current_row_indicator='Y'))&#xA;  from conform_riskman.incident_fact as f1&#xA;  inner join conform_riskman.action_dim as f2&#xA;  on f1.id=f2.ch_id&#xA;&#xA;&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{0DCA683D-DC10-424C-B86B-D3CAD815D1EB}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{39A9F8F0-A77D-4D65-8E30-B6A0BC4BFD9D}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{DC5AFD78-A28A-4F9C-BED7-E0A6D6766FA8}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{6E5705E4-EACB-426B-8E66-A762A9D8EE54}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{9420C39E-644F-45DF-9B81-63C581B39E82}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{F6B34CA0-5D76-4780-A178-F7488643BFE9}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{CEE8CBBA-0E29-4E8B-B74D-3606149F0EAD}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="INCIDENT_TYPE_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{1B2A5779-88EB-4704-95E0-6B4D0EC8A767}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="truncate table conform_riskman.INCIDENT_TYPE_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{2EF9B6E5-8428-4D93-A858-0DCEEF628B3C}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_TYPE_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{08F0CA1A-E0C4-4A66-94D5-5306EA8D332C}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_TYPE_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{359E8B0A-4023-4D26-9845-6FFFDCBB4841}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="--process definitions is not null&#xA; insert into   conform_riskman.INCIDENT_TYPE_FACT&#xA; select &#xA; f1.incident_key,&#xA; isnull(g1.incident_type_key, (select incident_type_key from conform_riskman.incident_type_dim  where current_row_indicator='Y' and super_group='No Incident Type' ))&#xA; from  conform_riskman.incident_fact as f1&#xA; inner join  &#xA; (&#xA;&#x9;  select t1.id, d1.incident_type_key&#xA;&#x9;  from &#x9;extract_riskman.IncidentClassificationsIFR as t1&#xA;&#x9;  inner join  conform_riskman.incident_type_dim as d1&#xA;&#x9;  on &#x9;  left(t1.Supergroup,50) =d1.super_group&#xA;       and left(t1.IncidentClass,50) =d1.incident_class&#xA;       and t1.Definitions is not NULL&#xA;&#x9;   and d1.definitions is not null&#xA;&#x9;   and left(t1.Definitions,50) = d1.definitions&#x9;&#x9; &#xA;&#xA; ) as g1&#xA; on f1.id=g1.ID&#xA;&#xA; --process definitions is  null&#xA; insert into   conform_riskman.INCIDENT_TYPE_FACT&#xA; select &#xA; f1.incident_key,&#xA; isnull(g1.incident_type_key, (select incident_type_key from conform_riskman.incident_type_dim  where current_row_indicator='Y' and super_group='No Incident Type' ))&#xA; from  conform_riskman.incident_fact as f1&#xA; inner join  &#xA; (&#xA;&#x9;  select t1.id, d1.incident_type_key&#xA;&#x9;  from &#x9;extract_riskman.IncidentClassificationsIFR as t1&#xA;&#x9;  inner join  conform_riskman.incident_type_dim as d1&#xA;&#x9;  on &#x9;  left(t1.Supergroup,50) =d1.super_group&#xA;       and left(t1.IncidentClass,50) =d1.incident_class&#xA;       and t1.Definitions is  NULL&#xA;&#x9;   and d1.definitions is  null&#xA;&#x9;  &#xA;&#xA; ) as g1&#xA; on f1.id=g1.ID" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{0D9EC2A0-D16E-4ECB-A249-392CEB148F8B}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{7C6589C4-E2CE-4B10-BBD3-2847A61E88F2}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{3B1F10D2-12D1-4E8C-B5FC-CE6C286E9D3D}"
              DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{36D674C9-3AC5-4FFA-872B-3D7F0D5FF984}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{E88E498E-D082-47ED-B274-1DBEB9250976}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{582D7156-F9B7-4086-BFC5-27F0B7746109}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{318b5729-e5c6-4041-8a0d-06e4b3023dbd}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - FEEDBACK_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{4a844be9-bf02-41ea-b5bc-e3a23fc2092c}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="&#xA;&#xA;truncate table conform_riskman.feedback_fact;&#xA;&#xA;&#xA;truncate table conform_riskman.Feedback_issue_fact;&#xA;&#xA;----below code is for setting the primary key on 1&#xA;DBCC CHECKIDENT ('conform_riskman.feedback_fact', reseed, 1)&#xA;&#xA;DBCC CHECKIDENT ('conform_riskman.Feedback_issue_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{1ba5d750-b743-42a2-baae-d72dca40e59e}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.feedback_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{e1a4a6e8-87d7-4997-adcf-4443dbaebe80}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.feedback_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{2d2e22d6-a7d9-4030-be52-80e66fa384e3}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="use dwhb &#xA;&#xA; --------------------------Step1: populate basic information------------------------------------------------------------&#xA; insert into conform_riskman.feedback_fact&#xA; ([ID],&#xA;Base_id,&#xA;[DisplayID],&#xA;IncidentInvolved,&#xA;person_key,&#xA;portfolio_key,&#xA;service_stream_key,&#xA;program_key,&#xA;closed_date_key,&#xA;incident_date_key,&#xA;notified_date_key,&#xA;age,&#xA;severity,&#xA;status,&#xA;location,&#xA;detail,&#xA;AdditionalRef,&#xA;[Site],&#xA;[Incident_Location],&#xA;[Outcome],&#xA;InvestigationFinding,&#xA;[Comment]&#xA; &#xA; )&#xA; select &#xA;  t1.id&#xA; ,t1.BaseID&#xA; ,t1.DisplayID&#xA; ,t1.IncidentInvolved&#xA; ,(select person_key from conform_riskman.person_dim where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.IncidentDate) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; , t1.Age&#xA; , t1.Outcome&#xA; , t1.Status&#xA;,left(t1.incident_location,50)&#xA;,t1.Detail&#xA;,t1.AdditionalRef&#xA;,t1.Site&#xA;,t1.Incident_Location&#xA;,t1.Outcome&#xA;,t1.InvestigationsFinding&#xA;,t1.Comment&#xA;&#xA; from extract_riskman.IncidentsForReview  as t1&#xA; inner join&#xA; (select BaseID,max(SequenceNo) as SequenceNo&#xA; from extract_riskman.IncidentsForReview&#xA; where SubModule='RMFeedback'&#xA; group by  BaseID&#xA; ) as t2&#xA; on  t1.baseid = t2.baseid &#xA; and t1.SequenceNo=t2.SequenceNo&#xA; and t1.SubModule='RMFeedback'&#xA;&#xA; --------------------------Step2: get other information------------------------------------------------------------&#xA;  update t1&#xA; set   t1.FBModeRecieved=t2.FBModeReceived&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.FBRelateClient=(case t2.FBRelateClient  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;  update t1&#xA; set   t1.FBRelateStaff=(case t2.FBRelateStaff  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;&#xA;  update t1&#xA; set   t1.FBAssocInc=(case t2.FBAssocInc  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.FBCompStatus=t2.FBCompStatus&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;    update t1&#xA; set   t1.FBCompStatusOther=t2.FBCompStatusOther&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;&#xA; &#xA;    update t1&#xA; set   t1.[FBCompAnon]=(case t2.[FBCompAnon]  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;     update t1&#xA; set   t1.[FBCompRelationship]=t2.[FBCompRelationship]&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.FBComplainant_IFR as t2  on t1.id=t2.FBComplainant_ID&#xA;&#xA;&#xA;   update t1&#xA; set   t1.[FBAckDate]=t2.[FBAckDate]&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;    update t1&#xA; set   t1.FBFirstFormalDate=t2.FBFirstFormalDate&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail_IFR] as t2  on t1.id=t2.FBDetail_ID&#xA;&#xA;     update t1&#xA; set   t1.FBIsClosed=(case t2.FBIsClosed  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBDetail1_IFR] as t2  on t1.id=t2.FBDetail1_ID&#xA;&#xA;&#xA;     update t1&#xA; set   t1.FBOutcome=t2.FBOutcome&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA;&#xA;      update t1&#xA; set   t1.FBObjectives=t2.FBObjectives&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA;&#xA; &#xA;      update t1&#xA; set   t1.FBExtAgency=(case t2.FBExtAgency  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA;&#xA;&#xA;       update t1&#xA; set   t1.FBExtAgencyName=t2.FBExtAgencyName&#xA; from  conform_riskman.feedback_fact as t1&#xA; inner join extract_riskman.[FBInvestigation_IFR] as t2  on t1.id=t2.FBInvestigation_ID&#xA;&#xA; --------------------------Step3: Update KEYs------------------------------------------------------------&#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.Feedback_Fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from  extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  and f1.SubModule='RMFeedback'&#xA;  ---and f1.DateOfBirth=d1.date_of_birth&#xA;  )  as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;&#xA;-------------------------------------------------------------------------------------------------------------Org mapping using four ways-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;---------------------------------------------------------------------------------WAY1: using  ANGCARE_IFR.CustService---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--changed by JS at 23/05/2017 based on table- ANGCARE_IFR.CustService&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.Feedback_Fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID and f1.SubModule='RMFeedback'&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.Feedback_Fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------------------------------------WAY2: using  IncidentsForReview.EmployeeSite -----------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='IncidentsForReview'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= (case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services')&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;   from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;    and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;-------------------------------------------------------WAY3: CustomerSite------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='CustomerSite' and  f2.value1 is not null&#xA;and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;&#xA;-------------------------------------------------------WAY4: incident_location------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.feedback_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='Incident_Location' and  f2.value1 is not null&#xA;  and f1.SubModule='RMFeedback'&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.feedback_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.feedback_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.feedback_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.feedback_key, g1.program_name&#xA;from conform_riskman.feedback_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.feedback_key=i.feedback_key&#xA;&#xA;&#xA;--Add in 12 June by FW&#xA;--Update Employee_key column&#xA;&#xA; update t1&#xA; set   t1.employee_key=t2.employee_key&#xA; from conform_riskman.Feedback_Fact as t1&#xA; inner join&#xA; (&#xA;&#x9;&#x9;  select distinct fff.id,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; fff.employee_key&#xA;&#x9;&#x9; from &#xA;&#x9;&#x9; (&#xA;&#x9;&#x9;  select  distinct  g1.id, d1.employee_key&#xA;&#x9;&#x9;&#x9;  from  extract_riskman.IncidentsForReview as g1&#xA;&#x9;&#x9;&#x9;  inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;&#x9;&#x9;  on  g1.username = d1.AD_UserID&#x9; &#xA;&#x9;&#x9;   union&#xA;&#x9;&#x9;&#x9;  select  distinct  g1.id, d1.employee_key&#xA;&#x9;&#x9;&#x9;  from  extract_riskman.IncidentsForReview as g1&#xA;&#x9;&#x9;&#x9;  inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;&#x9;&#x9;  on  g1.username = d1.user_id&#xA;&#x9;&#x9;   union&#xA;&#x9;&#x9;&#x9;&#x9;select f1.id,f3.employee_key &#xA;&#x9;&#x9;&#x9;&#x9;from  extract_riskman.IncidentsForReview  as f1&#xA;&#x9;&#x9;&#x9;&#x9;inner join extract_riskman.UserProfile as f2  on f1.username =f2.username &#xA;&#x9;&#x9;&#x9;&#x9;inner join conform_riskman.employee_dim as f3 on f2.LDAP_Username=f3.AD_UserID&#xA;&#x9;&#x9; ) as fff&#xA;&#x9;) as t2&#xA;  on t1.id=t2.ID;&#xA;  &#xA;  --if not found just fill with NO_EMPLOYEE_KEY&#xA;   update t1&#xA; set   t1.employee_key=(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') &#xA; from conform_riskman.Feedback_Fact as t1&#xA; where t1.employee_key is null;&#xA;&#xA;&#xA;&#xA;-------------step4:  populate  Feedbak_issue_fact tables ---------------------------&#xA;insert into conform_riskman.Feedback_Issue_Fact&#xA;select&#xA;Displayid&#xA;,f.FBIssueId&#xA;,f.FBIssueGroup&#xA;,f.FBIssue&#xA;,f.FBIssueNotes&#xA;from extract_riskman.vwReg_RMFeedback r inner join extract_riskman.vwSF_FBIssue f on r.FBIssuePrevRECID=f.Keydata&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{17ca96f6-a151-4bb0-9163-ed66a946e4f1}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{580d33e4-3d28-4035-8d66-ab2af7fca815}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{ea60419e-cf20-4307-bee7-0dd18e71e54b}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{cdb8c54d-58ce-4a9e-adec-0ced48f7d3a5}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{3d1846c9-058d-4b2c-a48c-799e7f951b96}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{4bab69f4-d019-41cb-bf80-c63d6c4c2188}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:Disabled="True"
          DTS:DTSID="{85F516A0-E60D-42FF-9487-9347D76018DD}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - INCIDENT_FACT -- keep all records and with bridge tables">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{93DCA55A-1F44-4917-8A2F-100AF1A53C90}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table conform_riskman.incident_type_bridge&#xA;truncate table conform_riskman.incident_action_bridge&#xA;delete from conform_riskman.incident_fact" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{CEAC96CC-7099-4F11-98BB-00DBC6C57356}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{90C2A01E-2749-4A49-B0F0-03DDABCE9C5C}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{C7223239-4824-4955-8AEE-DC2C380591C6}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource=" --delete old data&#xA;delete from  conform_riskman.incident_fact&#xA; --populate new data &#xA; insert into conform_riskman.incident_fact&#xA; select &#xA;  id&#xA; ,BaseID&#xA; ,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') --default employee_key&#xA; ,(select person_key from conform_riskman.person_dim&#x9;where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim&#x9;where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim&#x9;where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim&#x9;where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = IncidentDate)&#x9;,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateDeleted)&#x9;,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = DateEntered)&#x9; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_ini_date_key&#xA; , (select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_completed_date_key&#xA; ,IncidentTime&#xA; , Age&#xA; , left(Outcome,20)&#xA; , left(Status,20)&#xA; , left(Program,50)&#xA; , case IncidentInvolved &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),IncidentInvolved)&#xA;    end&#xA;&#xA; , case Deceased &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),Deceased)&#xA;    end&#xA; , case CoronerNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),CoronerNotified)&#xA;    end&#xA;&#xA;  , case Autopsy &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),Autopsy)&#xA;    end&#xA;&#xA; , case NextOfKinNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else convert(varchar(3),NextOfKinNotified)&#xA;    end&#xA;&#xA;&#xA;&#x9;, left(NotificationReason,20)&#xA;&#x9;, left(TransferRequired,20)&#xA;&#x9;,left(EmployeeSite,50)&#xA;&#x9;,left(NatureOfInjury,50)&#xA;&#x9;, left(Description ,255)&#xA;&#x9;, left(StaffLostTimeHours,3)&#xA;&#x9;, 'No' -------- defulat value for investigation_initiated&#xA;&#x9;,StaffWorkcoveNotif&#xA;&#x9;,StaffInjury&#xA;&#x9;,'No'  -------- defulat value for preventative_corrective_action_required&#xA;    ,'No'  -------- defulat value for police_notified&#xA;&#x9;,'No'  -------- defulat value for fire_brigade_notified&#xA;&#x9;,'No'  -------- defulat value for ambulance__notified&#xA;&#x9;,'No'  -------- defulat value for human_services_notified&#xA;&#x9;,'No'  -------- defulat value for health_sa_notified&#xA;&#x9;,'No'  -------- defulat value for crisis_intervention_notified&#xA;&#x9;,'No'  -------- defulat value for carl_notified&#xA;&#x9;,'No'  -------- defulat value for ag_notified&#xA;    ,'No'  -------- defulat value for housing_regulator_notified&#xA;&#x9;,'No'  -------- defulat value for funder_notified&#xA;    ,'No'  -------- defulat value for parent_guardian_notified&#xA; from extract_riskman.IncidentsForReview &#xA;&#xA;&#xA;&#xA; --update   InvDate&#x9;and InvestCompDate&#x9;,  investigation_initiatede,PHNotif,ACATNotif&#x9;from ANGCARE_IFR&#xA; update t1&#xA; set   t1.investigation_initiated_date_key=d1.date_key&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvDate =d1.full_date&#xA;&#xA;  update t1&#xA; set   t1.investigation_completed_date_key=d1.date_key&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvestCompDate =d1.full_date&#xA;&#xA; update t1&#xA; set   t1.investigation_initiated=(case t2.InvInit&#x9; when '0' then 'No' when '1' then 'Yes' else  convert(varchar(3), t2.InvInit) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.health_sa_notified=(case t2.PHNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.PHNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.crisis_intervention_notified=(case t2.ACATNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.ACATNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2&#x9; on t1.id=t2.ANGCARE_ID&#xA;&#xA;  --update preventative_corrective_action_required from ch_ifr table&#xA;&#xA; update t1&#xA; set   t1.preventative_corrective_action_required=(case t2.CHPrevActReq&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.CHPrevActReq) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.CH_IFR as t2&#x9; on t1.id=t2.CH_ID&#xA;&#xA; --update column based on &#x9;BEN_IFR&#xA;  update t1&#xA; set   t1.human_services_notified=(case t2.Vicdhs&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.Vicdhs) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.BEN_IFR as t2&#x9; on t1.id=t2.ben_id&#xA;&#xA; --update columns based on &#x9;IncNotif_IFR table&#xA; update t1&#xA; set   t1.police_notified=(case t2.PoliceNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.PoliceNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;  update t1&#xA; set   t1.fire_brigade_notified=(case t2.FireNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.FireNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; &#xA;  update t1&#xA; set   t1.ambulance__notified=(case t2.AmbNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.AmbNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.carl_notified=(case t2.ChildAbuseNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.ChildAbuseNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;&#xA;    update t1&#xA; set   t1.ag_notified=(case t2.AGNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.AGNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;     update t1&#xA; set   t1.housing_regulator_notified=(case t2.HouseReg&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.HouseReg) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;  &#xA;     update t1&#xA; set   t1.funder_notified=(case t2.Funder&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.Funder) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;      update t1&#xA; set   t1.parent_guardian_notified=(case t2.GuardNotif&#x9; when '0' then 'No' when '1' then 'Yes' else   convert(varchar(3),t2.GuardNotif) end)&#xA; from &#x9;conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2&#x9; on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; --update person_key&#x9; &#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.incident_fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from &#x9;extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  and f1.DateOfBirth=d1.date_of_birth&#xA;  )&#x9; as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;  -----------update logged_by_employee_key&#xA;  --frist: based on firstname and last name&#xA;  update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.userdisplayname = d1.given_name+' '+d1.family_name&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;    update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.userdisplayname = d1.preferred_name+' '+d1.family_name&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;  --based on email:&#xA;&#xA;      update t1&#xA;  set &#x9;t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;&#x9; from extract_riskman.UserProfile as f1&#xA;&#x9; inner join &#xA;&#x9;  conform_riskman.employee_dim as d1 &#xA;&#x9;  on f1.email = d1.street_email1&#xA;&#x9;  and d1.current_row_indicator='Y'&#xA;&#x9;  ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;-------------------------------------------------------populate org structure------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--populate program_key&#xA;&#xA;   --if site is null just use incident_location&#xA;   update t1&#xA;   set &#x9; t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;&#x9; select f1.id,f1.baseid,f2.program_key&#xA;&#x9; from extract_riskman.IncidentsForReview &#x9;as f1&#xA;&#x9; inner join  conform_riskman.program_mapping as f2&#xA;&#x9; on f1.Incident_Location=f2.incident_location&#xA;&#x9; where f1.Site is null &#xA;&#x9; and f2.site is null&#xA;&#x9; and f2.program_key is not null&#xA;&#xA;&#x9;) as t2&#xA;&#x9;on t1.id =t2.id &#xA;&#x9;and t1.base_id=t2.BaseID&#xA;&#xA;   --if site is not null use site and incident_location&#xA;&#xA;&#x9;update t1&#xA;   set &#x9; t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;&#x9; select f1.id,f1.baseid,f2.program_key&#xA;&#x9; from extract_riskman.IncidentsForReview &#x9;as f1&#xA;&#x9; inner join  conform_riskman.program_mapping as f2&#xA;&#x9; on f1.Incident_Location=f2.incident_location&#xA;&#x9; and f1.Site=f2.site&#xA;&#x9; where f1.Site is not null &#xA;&#x9; and f2.site is not null&#xA;&#x9; and f2.program_key is not null&#xA;&#xA;&#x9;) as t2&#xA;&#x9;on t1.id =t2.id &#xA;&#x9;and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from &#x9; conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA;&#x9;n1.incident_key,&#xA;&#x9;n1.program_name,&#xA;&#x9;n1.service_stream_name,&#xA;&#x9;n1.portfolio_name,&#xA;&#x9;dd1.service_stream_key,&#xA;&#x9;dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select &#x9; g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select &#x9;f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code&#x9;, d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{290BF41E-FE25-4614-B580-BFED8D7F7F43}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{70EBC31E-FE65-4FEF-86CE-A3D3C1BF1CE1}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{A322EEC1-73B8-4775-BDA4-B20C101A7118}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{04956DC3-1407-4CF8-B21B-CA9749AF6D54}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{5E42D00F-7C03-4CF2-9575-94F137768287}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{C0766518-5DFF-4022-8CBB-991F45D9F4D6}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{E45141F3-179D-4207-A14A-01DE01DC5FAC}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - INCIDENT_FACT -- Keep one record for one incident">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{5B5A9889-C662-46FE-AC8F-C7506CD991A6}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;&#xA;truncate table conform_riskman.INCIDENT_TYPE_FACT&#xA;&#xA;truncate table conform_riskman.INCIDENT_ACTION_FACT&#xA;&#xA;truncate table &#x9;conform_riskman.INCIDENT_HISTORY_FACT&#xA;&#xA;delete from  conform_riskman.incident_fact&#xA;&#xA;----below code is for setting the primary key on 1&#xA;DBCC CHECKIDENT ('conform_riskman.incident_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{588C0E76-BC53-496D-AB95-EAED7E12C0F3}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{175B5A49-BCA0-4513-AE70-E618565630CD}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.incident_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{E0E92999-FB34-46A0-9A3E-7F11019F8254}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="&#xA;&#xA; --populate new data &#xA; insert into conform_riskman.incident_fact&#xA; select &#xA;  t1.id&#xA; ,t1.BaseID&#xA; ,t1.DisplayID&#xA; --,(select employee_key from conform_riskman.employee_dim where given_name='-' and current_row_indicator='Y') --default employee_key&#xA; ,(select person_key from conform_riskman.person_dim where given_name='No Person' and current_row_indicator='Y') --default person_key&#xA; ,(select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='No Portfolio' and current_row_indicator='Y') -- default_portfolio_key&#xA; ,( select service_stream_key from conform_riskman.service_stream_dim where service_stream_name='No Service Stream' and current_row_indicator='Y') --default service_stream_key&#xA; ,(select program_key from conform_riskman.program_dim where program_name='No Program' and current_row_indicator='Y') --default_program_key&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateClosed),(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.IncidentDate) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.NotificationDate)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateDeleted) ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; --,ISNULL((select date_key from conform_riskman.date_dim where full_date = t1.DateEntered)  ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000'))&#xA; ,(select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_ini_date_key&#xA; , (select date_key from conform_riskman.date_dim where full_date = '1800-01-01 00:00:00.000')  --default date key for investigation_completed_date_key&#xA; ,t1.IncidentTime&#xA; , t1.Age&#xA; , left(t1.Outcome,20)&#xA; , left(t1.Status,20)&#xA;,left(t1.incident_location,50)&#xA; , left(t1.Program,50)&#xA; ,left( t1.IncidentInvolved ,50)&#xA; , case t1.Deceased &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA; , case t1.CoronerNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA;  , case t1.Autopsy &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA; , case t1.NextOfKinNotified &#xA;   when '0' then 'No' &#xA;   when '1' then  'Yes' &#xA;   else 'No'&#xA;    end&#xA;&#xA;&#xA; , left(t1.NotificationReason,20)&#xA; , left(t1.TransferRequired,20)&#xA; ,left(t1.EmployeeSite,50)&#xA; ,left(t1.NatureOfInjury,50)&#xA; , left(t1.Description ,255)&#xA; , left(t1.StaffLostTimeHours,3)&#xA; , 'No' -------- defulat value for investigation_initiated&#xA; ,case t1.StaffWorkcoveNotif   when '0' then 'No' when '1' then 'Yes' else 'No' end as &#x9;safeworksa&#xA; ---,t1.StaffInjury&#xA;, case when len(t1.NatureOfInjury)&lt;&gt;0  then 'Yes' else 'No' end&#xA; ,'No'  -------- defulat value for preventative_corrective_action_required&#xA;    ,'No'  -------- defulat value for police_notified&#xA; ,'No'  -------- defulat value for fire_brigade_notified&#xA; ,'No'  -------- defulat value for ambulance__notified&#xA; ,'No'  -------- defulat value for human_services_notified&#xA; ,'No'  -------- defulat value for health_sa_notified&#xA; ,'No'  -------- defulat value for crisis_intervention_notified&#xA; ,'No'  -------- defulat value for carl_notified&#xA; ,'No'  -------- defulat value for ag_notified&#xA;    ,'No'  -------- defulat value for housing_regulator_notified&#xA; ,'No'  -------- defulat value for funder_notified&#xA;    ,'No'  -------- defulat value for parent_guardian_notified&#xA;,left(t1.detail,255)&#xA;,''&#xA;,'' &#xA;,site,&#xA;'No'-- ChCCUNotif added at 29/01/2018 by JS&#xA; from extract_riskman.IncidentsForReview  as t1&#xA; inner join&#xA; (select BaseID,max(SequenceNo) as SequenceNo&#xA; from extract_riskman.IncidentsForReview&#xA; group by  BaseID&#xA; ) as t2&#xA; on  t1.baseid = t2.baseid &#xA; and t1.SequenceNo=t2.SequenceNo&#xA;&#xA;&#xA;&#xA; --update   InvDate and InvestCompDate ,  investigation_initiatede,PHNotif,ACATNotif from ANGCARE_IFR&#xA; update t1&#xA; set   t1.investigation_initiated_date_key=d1.date_key&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvDate =d1.full_date&#xA;&#xA;&#xA; update t1&#xA; set   t1.cust_service=t2.custService, t1.customer_site=t2.customerSite&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA;&#xA;  update t1&#xA; set   t1.investigation_completed_date_key=d1.date_key&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA; inner join conform_riskman.date_dim as d1 on t2.InvestCompDate =d1.full_date&#xA;&#xA; update t1&#xA; set   t1.investigation_initiated=(case t2.InvInit  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.health_sa_notified=(case t2.PHNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;&#xA; update t1&#xA; set   t1.crisis_intervention_notified=(case t2.ACATNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.ANGCARE_IFR as t2  on t1.id=t2.ANGCARE_ID&#xA;&#xA;  --update preventative_corrective_action_required from ch_ifr table&#xA;&#xA; update t1&#xA; set   t1.preventative_corrective_action_required=(case t2.CHPrevActReq  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.CH_IFR as t2  on t1.id=t2.CH_ID&#xA;&#xA; --update column based on  BEN_IFR&#xA;  update t1&#xA; set   t1.human_services_notified=(case t2.Vicdhs  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.BEN_IFR as t2  on t1.id=t2.ben_id&#xA;&#xA; --update columns based on  IncNotif_IFR table&#xA; update t1&#xA; set   t1.police_notified=(case t2.PoliceNotif  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;  update t1&#xA; set   t1.fire_brigade_notified=(case t2.FireNotif  when '0' then 'No' when '1' then 'Yes' else  'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA; &#xA;  update t1&#xA; set   t1.ambulance__notified=(case t2.AmbNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;   update t1&#xA; set   t1.carl_notified=(case t2.ChildAbuseNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;&#xA;    update t1&#xA; set   t1.ag_notified=(case t2.AGNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA;     update t1&#xA; set   t1.housing_regulator_notified=(case t2.HouseReg  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;  &#xA;     update t1&#xA; set   t1.funder_notified=(case t2.Funder  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;      update t1&#xA; set   t1.parent_guardian_notified=(case t2.GuardNotif  when '0' then 'No' when '1' then 'Yes' else   'No' end)&#xA; from  conform_riskman.incident_fact as t1&#xA; inner join extract_riskman.IncNotif_IFR as t2  on t1.id=t2.incNotif_id&#xA;&#xA;&#xA;&#xA; update t1&#xA; set t1.ChCCUNotif='Yes'&#xA;  from  conform_riskman.incident_fact as t1&#xA;  inner join extract_riskman.CAbuse_IFR as t2&#xA;  on t1.id = t2.cabuse_id&#xA;  and t2.ChCCUNotif=1&#xA;&#xA;&#xA; --update person_key  &#xA; update t1&#xA; set   t1.person_key=t2.person_key&#xA; from conform_riskman.incident_fact as t1&#xA; inner join&#xA; (select  f1.id, d1.person_key&#xA;  from  extract_riskman.IncidentsForReview as f1&#xA;  inner join conform_riskman.person_dim as d1&#xA;  on left(f1.firstname,50) =d1.given_name&#xA;  and left(f1.surname,50) =d1.family_name&#xA;  ---and f1.DateOfBirth=d1.date_of_birth&#xA;  )  as t2&#xA;  on t1.id=t2.ID&#xA;&#xA;  /*-----------update logged_by_employee_key&#xA;  --frist: based on firstname and last name&#xA;  update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.userdisplayname = d1.given_name+' '+d1.family_name&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;&#xA;    update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.userdisplayname = d1.preferred_name+' '+d1.family_name&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;&#xA;  --based on email:&#xA;&#xA;      update t1&#xA;  set  t1.logged_by_employee_key =t2.employee_key&#xA;  from conform_riskman.incident_fact as t1&#xA;  inner join &#xA;  (&#xA;   select  g1.id, g2.employee_key&#xA;   from  extract_riskman.IncidentsForReview as g1&#xA;   inner join&#xA;    (select f1.userdisplayname,d1.employee_key ,f1.username&#xA;  from extract_riskman.UserProfile as f1&#xA;  inner join &#xA;   conform_riskman.employee_dim as d1 &#xA;   on f1.email = d1.street_email1&#xA;   and d1.current_row_indicator='Y'&#xA;   ) as g2&#xA;  on g1.username = g2.username &#xA;  ) as t2&#xA;  on t1.id =t2.id &#xA;  */&#xA;&#xA;-------------------------------------------------------populate org structure------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--populate program_key&#xA;&#xA;/*&#xA;&#xA;   --if site is null just use incident_location&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.incident_location&#xA;  where f1.Site is null &#xA;  and f2.site is null&#xA;  and f2.program_key is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;   --if site is not null use site and incident_location&#xA;&#xA; update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.incident_location&#xA;  and f1.Site=f2.site&#xA;  where f1.Site is not null &#xA;  and f2.site is not null&#xA;  and f2.program_key is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;*/&#xA;&#xA;-------------------------------------------------------------------------------------------------------------Org mapping using four ways-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;---------------------------------------------------------------------------------WAY1: using  ANGCARE_IFR.CustService---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;--changed by JS at 23/05/2017 based on table- ANGCARE_IFR.CustService&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key= isnull((case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services' and current_row_indicator='Y' )&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services' and current_row_indicator='Y' )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living' and current_row_indicator='Y' )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;), (select portfolio_key from  [DWHB].[conform_riskman].portfolio_dim  where current_row_indicator='Y' and portfolio_name='No Portfolio')),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join extract_riskman.ANGCARE_IFR as f3 on f1.id =f3.ANGCARE_ID&#xA;  inner join  conform_riskman.program_mapping as f2&#x9;    on f3.CustService=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;&#xA;----------------------------------------WAY2: using  IncidentsForReview.EmployeeSite -----------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&#xA;---Step1: update CustomerSite type = program&#xA;update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  where f2.program_key is not null  and  f2.mapping_type='Program' and f2.system='Riskman' and f2.table1='IncidentsForReview'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;where  t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;&#xA;----update service_stream_key and portfolio_key&#xA;&#xA;update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;----------Step2: update CustomerSite type = Service Stream&#xA;&#xA; update t1&#xA;   set   t1.portfolio_key=  isnull((case t2.program_name&#xA;                           when   'Community Services' then (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Community Services' and current_row_indicator='Y' )&#xA;                           when 'Community Engagement' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Aboriginal Services' and current_row_indicator='Y' )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   when 'Residental Aged Care' then   (select portfolio_key from conform_riskman.portfolio_dim where portfolio_name='Active Living' and current_row_indicator='Y' )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   end&#x9;), (select portfolio_key from  [DWHB].[conform_riskman].portfolio_dim  where current_row_indicator='Y' and portfolio_name='No Portfolio')),&#xA;                         &#xA;        t1.service_stream_key= t2.service_stream_key,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.service_stream_key&#xA;   from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.service_stream_dim as d1 on d1.service_stream_name=f2.program_name&#x9;  and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Service Stream' and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;&#xA;----------Step3: update CustomerSite type = Portfolio&#xA;&#xA;&#xA; &#x9;update t1&#xA;   set   t1.portfolio_key=t2.portfolio_key ,&#xA;        t1.service_stream_key= (select service_stream_key from conform_riskman.service_stream_dim where current_row_indicator='Y'  and service_stream_name ='No Service Stream')  ,&#xA;&#x9;&#x9;t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y'  and program_name ='No Program')  &#xA;    &#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid ,f2.*&#x9;,d1.portfolio_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;   inner join  conform_riskman.program_mapping as f2&#x9;    on f1.EmployeeSite=f2.value1&#xA;  inner join conform_riskman.portfolio_dim as d1 on d1.portfolio_name=f2.program_name and d1.current_row_indicator='Y'&#xA;  where f2.mapping_type='Portfolio'&#x9;  and f2.system='Riskman' and f2.table1='ANGCARE_IFR'&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA;&#xA;-------------------------------------------------------WAY3: CustomerSite------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='CustomerSite' and  f2.value1 is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;-------------------------------------------------------WAY4: incident_location------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;   update t1&#xA;   set   t1.program_key=t2.program_key&#xA;   from   conform_riskman.incident_fact as t1&#xA;   inner join&#xA;   (&#xA;&#xA;  select f1.id,f1.baseid,f2.program_key&#xA;  from extract_riskman.IncidentsForReview  as f1&#xA;  inner join  conform_riskman.program_mapping as f2&#xA;  on f1.Incident_Location=f2.value1&#xA;  where  f2.table1='IncidentsForReview' and f2.name1='Incident_Location' and  f2.value1 is not null&#xA;&#xA; ) as t2&#xA; on t1.id =t2.id &#xA; and t1.base_id=t2.BaseID&#xA; where   t1.program_key=(select program_key from conform_riskman.program_dim where current_row_indicator='Y' and program_name ='No Program')&#xA;&#xA;  &#xA;&#xA; update k&#xA; set   k.service_stream_key=i.service_stream_key, k.portfolio_key=i.portfolio_key&#xA; from   conform_riskman.incident_fact as k&#xA; inner join&#xA;(&#xA;select &#xA; n1.incident_key,&#xA; n1.program_name,&#xA; n1.service_stream_name,&#xA; n1.portfolio_name,&#xA; dd1.service_stream_key,&#xA; dd2.portfolio_key&#xA;&#xA;&#xA;from&#xA;(&#xA;select   g2.incident_key,f2.program_name,f2.service_stream_name,f2.portfolio_name&#xA;from &#xA;(&#xA;select  f1.incident_key, g1.program_name&#xA;from conform_riskman.incident_fact as f1&#xA;inner join conform_riskman.program_dim as g1 on f1.program_key=g1.program_key and g1.current_row_indicator='Y'&#xA;) as g2&#xA;inner join &#xA;&#xA;&#xA;(&#xA;--get all org based on names&#xA;select distinct t1.program_code,t1.service_stream_code,t2.portfolio_code , d1.program_name  ,d2.service_stream_name ,d3.portfolio_name ,d1.program_key,d2.service_stream_key,d3.portfolio_key&#xA;from conform.program_temp  as t1&#xA;inner join conform.service_stream_temp as t2   on t1.service_stream_code=t2.service_stream_code&#xA;inner join conform.program_dim as d1 on t1.program_code=d1.program_code and d1.current_row_indicator='Y'&#xA;inner join conform.service_stream_dim as d2 on t1.service_stream_code=d2.service_stream_code and d1.current_row_indicator='Y'&#xA;inner join conform.portfolio_dim as d3 on t2.portfolio_code=d3.portfolio_code and d1.current_row_indicator='Y'&#xA;)  as f2 on g2.program_name=f2.program_name&#xA;) as n1&#xA;inner join conform_riskman.service_stream_dim as dd1 on dd1.service_stream_name=n1.service_stream_name and dd1.current_row_indicator='Y'&#xA;inner join conform_riskman.portfolio_dim as dd2 on dd2.portfolio_name=n1.portfolio_name and dd1.current_row_indicator='Y'&#xA;) as i &#xA;on k.incident_key=i.incident_key&#xA;&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{7D88EA17-5134-48F9-866E-2E92F985F599}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{2F7FAFF4-1A9B-4AD5-80C4-6E04AABBE3AC}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{A24BB915-9404-4C32-A1D1-60FE76764B65}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{A920A2BF-180E-456E-8016-BB08C6CF7A51}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{118DE833-C3FA-443F-8AF8-B157D8480EA5}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{4088EFCA-9B05-4F98-8A22-974389999FF1}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{2bdf213b-1ae0-4e0c-9337-f38ffec4ff5e}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - pressure_injury_fact">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{3c2f85ed-07f7-4e14-aa27-f810a1b5492f}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete and Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="use dwhb&#xA;&#xA;&#xA; truncate table conform_riskman.pressure_injury_fact;&#xA;&#xA;go&#xA;&#xA;insert into [conform_riskman].[pressure_injury_fact]&#xA;([incident_id]&#xA;      ,[location_on_body]&#xA;      ,[other_location]&#xA;      ,[stage_of_pressure_injury]&#xA;      ,[care_setting]&#xA;      ,[other_care_setting]&#xA;      ,[other_site]&#xA;      ,[how_developed],&#xA;&#x9;  [Id])&#xA;  select &#xA;r.Displayid as 'Incident ID',&#xA;f.BodyLocation as 'Location on body',&#xA;f.OtherDetail as 'Other location', &#xA;f.UlcerStage as 'Stage of pressure injury', &#xA;f.CareSetting as 'Care setting where injury developed',&#xA;f.CareSettingOther as 'Other care setting', &#xA;f.CareSettingOtherSite as 'Other Site',&#xA;f.HowDeveloped as 'How pressure injury developed',&#xA;r.id&#xA;&#xA;from extract_riskman.vwReg_Incidents  r &#xA;inner join extract_riskman.[vwSF_PressureUlcer] f on r.PrevRecID2=f.Keydata" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{312c5684-744a-41be-8919-f3793aa353e5}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.pressure_injury_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{579fc1d3-8d8a-4dbf-8865-5b7178db8a04}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.pressure_injury_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{c241dc97-5515-492e-97ba-d97b87de2f40}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{9d2df372-181a-4ce4-9fde-4cde95e53d4d}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{bf045df9-ea5e-45fa-acbc-7c2d8225a7ea}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{47eb1bee-8aaf-4248-a5ff-d520fb067330}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{a5b3f513-641b-4c88-9109-20eb77d792f7}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{8f7b82e8-053d-4cf7-b7fd-e222af964ec3}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 - SKINTEAR_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{b85832f7-d114-49db-8e4d-5233601d26c5}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="&#xA;&#xA;truncate table conform_riskman.skintear_fact;&#xA;&#xA;&#xA;DBCC CHECKIDENT ('conform_riskman.skintear_fact', reseed, 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{1ad55e1c-bcff-453d-aa75-7aab8faacbfb}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.skintear_fact'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{0464923a-1a35-4d47-90ef-3e370c7536fa}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.skintear_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{6ec44d11-1d64-4e15-bb08-2461bf1c6a29}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="insert into conform_riskman.SkinTear_Fact&#xA;select r.Displayid &#xA;, f.STBodyLocation &#xA;, f.STOtherDetail &#xA;, f.STCategory &#xA;, f.STCareSetting &#xA;, f.STCareSettingOther&#xA;, f.STCareSettingOtherSite&#xA;, f.STHowDeveloped &#xA;,r.id&#xA;from extract_riskman.vwReg_Incidents r &#xA;inner join extract_riskman.[vwSF_SkinTear] f on r.STPrevRECID=f.Keydata&#xA;&#xA;&#xA;truncate table dwhf_riskman.riskman.SkinTear_Fact;&#xA;insert into  dwhf_riskman.riskman.SkinTear_Fact&#xA;select * from dwhb.conform_riskman.SkinTear_Fact" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{53a2e91b-bf6c-4f81-8058-451c0f25bec6}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{c867b843-b063-4fd3-808a-fccaab30d42f}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{8bf63878-6c54-4ccc-8850-5db45c4816c4}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{832c1e05-4a41-4b42-844a-58cf26a7a7f0}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{29fd1988-9f01-46bb-a93f-dab02e753a1c}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{e3056307-1d2b-4c76-b69c-e471e41cdffd}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{5A883BE2-5337-4500-9122-FDA41FA62F37}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{95652AA6-ED57-4E09-AE8C-2D8AB1CB0769}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="SD1 INCIDENT_HISTORY_FACT">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{506B6F98-6418-48E0-A24D-3A1B04FCA688}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Delete Existing Data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="--- need to change later just delete the data for yesterday&#xA;&#xA;truncate table  conform_riskman.INCIDENT_HISTORY_FACT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{06BDC138-089F-4317-AE28-922A3D501D5D}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Finish info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,2&#xA;,GETDATE() ,&#xA;4,&#xA;'Finish updating FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_HISTORY_FACT'&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{C6F9FE54-E758-482E-AE3A-9A168B9C0736}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="EST - Write Job Start info"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,1&#xA;,GETDATE() ,&#xA;4,&#xA;'Start to update FACT table'&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform_riskman.INCIDENT_HISTORY_FACT'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{2E09572B-6862-4658-8D10-23A67E7962B2}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Populate new data"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                  SQLTask:SqlStatementSource="insert into    conform_riskman.INCIDENT_HISTORY_FACT   &#xA;select &#xA;isnull(ttt.employee_key,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') ),&#xA;&#xA;f1.incident_key&#x9;  ,&#xA;isnull(ttt.employee_key,(select employee_key from conform_riskman.employee_dim&#x9;where given_name='-' and current_row_indicator='Y') ),&#xA;t1.DateEntered&#x9;&#x9; &#xA;&#xA;from    extract_riskman.IncidentsForReview&#x9; as t1&#xA;left join conform_riskman.incident_fact as f1 on t1.baseid =f1.base_id&#xA;left join&#xA;&#xA; ( &#xA; select distinct fff.id,&#xA;                 fff.employee_key&#xA; from &#xA; (&#xA;  select  distinct  g1.id, d1.employee_key&#xA;      from  extract_riskman.IncidentsForReview as g1&#xA;      inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;  on  g1.username = d1.AD_UserID&#x9; &#xA;   union&#xA;      select  distinct  g1.id, d1.employee_key&#xA;      from  extract_riskman.IncidentsForReview as g1&#xA;      inner join   conform_riskman.employee_dim as d1 &#xA;&#x9;  on  g1.username = d1.user_id&#xA;   union&#xA;        select f1.id,f3.employee_key &#xA;&#x9;&#x9;from  extract_riskman.IncidentsForReview  as f1&#xA;&#x9;&#x9;inner join extract_riskman.UserProfile as f2  on f1.username =f2.username &#xA;&#x9;&#x9;inner join conform_riskman.employee_dim as f3 on f2.LDAP_Username=f3.AD_UserID&#xA; ) as fff&#xA; &#xA; ) as ttt&#xA; on t1.id=ttt.ID&#xA;&#xA;&#xA;--update manager_key&#xA;&#xA;update &#x9;tt1&#xA;set tt1.manager_key=tt2.employee_key&#xA;from conform_riskman.INCIDENT_HISTORY_FACT  as tt1&#xA;inner join&#xA;(&#xA;select&#x9;g1.*,i1.employee_key as manager_key&#xA;from &#xA;(&#xA;select t1.employee_key,t1.id_number,k1.manager_id_number &#xA;from conform_riskman.employee_dim as t1&#xA;left join &#xA;(select f1.employee_key,&#xA;       d1.id_number as employee_id_number,&#xA;       f1.manager_key &#x9;,&#xA;&#x9;   d2.id_number as manager_id_number&#xA;from conform.employee_position_fact as f1&#xA;left join conform.employee_dim as d1 on f1.employee_key=d1.employee_key &#x9;and d1.current_row_indicator='Y'&#xA;left join conform.employee_dim as d2 on f1.manager_key=d2.employee_key &#x9;and d2.current_row_indicator='Y'&#xA;where f1.primary_position_flag='P'&#xA;) as k1 on t1.id_number =k1.employee_id_number and t1.current_row_indicator='Y'&#xA;) as g1&#xA;left join conform_riskman.employee_dim as i1 on g1.manager_id_number=i1.id_number and i1.current_row_indicator='Y'&#xA;) as tt2&#xA;on tt1.employee_key=tt2.employee_key&#xA;and tt2.manager_key is not null" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{CB7860FC-44A4-499D-B183-75228F34EC15}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{24F5DF9D-8BCD-4FE6-AB4D-E3CDC3359522}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{0363F2E6-FC0C-41D5-B289-C0697592ACAF}"
              DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info" />
          </DTS:PrecedenceConstraints>
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{E71F577D-3041-4AB8-9F37-B30CDF40C74F}"
              DTS:EventID="244"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{68924427-FCA2-4AE5-AE2C-636EA0982CA4}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
                  DTS:CreationName="Microsoft.ExecuteSQLTask"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{D632E1B1-52BA-421A-BBE9-A7626BFAD6DF}"
                  DTS:ExecutableType="Microsoft.ExecuteSQLTask"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute SQL Task - Catch Error Details">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
                      SQLTask:SqlStatementSource="-- insert into management.ERROR_EVENT_DETAIL_FACT table&#xA;&#xA;insert into management.ERROR_EVENT_DETAIL_FACT&#xA;SELECT &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,T2.TABLE_KEY&#xA;,T2.TABLE_KEY&#xA;,?&#xA;,' '&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;&#xA;-- insert into [management].ETL_PROCESS_FACT with 'Failed'&#xA;INSERT INTO [management].ETL_PROCESS_FACT&#xA;SELECT  &#xA;(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch')&#xA;, T2.TABLE_KEY&#xA;,3&#xA;,GETDATE() &#xA;,4&#xA;,'Update Fact Table'    &#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA; -- insert into management.ERROR_EVENT_FACT table&#xA;insert into management.ERROR_EVENT_FACT&#xA;SELECT &#xA;(SELECT batch_key FROM management.BATCH_DIM WHERE BATCH_TYPE='batch') &#xA;,(SELECT DATE_KEY FROM management.DATE_DIM WHERE CONVERT(DATE,FULL_DATE)=CONVERT(DATE,GETDATE()) )&#xA;,convert(varchar, getdate(),21)&#xA;, 'HIGH'&#xA;,4&#xA;FROM  management.TABLE_DIM T2&#xA;WHERE T2.[SCHEMA]+'.'+T2.TABLE_NAME='conform.employee_termination_fact'&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding
                        SQLTask:ParameterName="0"
                        SQLTask:DtsVariableName="System::ErrorDescription"
                        SQLTask:ParameterDirection="Input"
                        SQLTask:DataType="130"
                        SQLTask:ParameterSize="-1" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\update incident_location"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{8FF3DF85-1577-4662-9887-716C1DB30980}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="update incident_location"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
              SQLTask:SqlStatementSource="&#xA;update extract_riskman.IncidentsForReview&#xA;set Incident_Location = &#xA;&#x9;case Incident_Location &#xA;&#x9;when 'All Hallows' then 'Westbourne Park'&#xA;&#x9;when 'AnglicareSA Westbourne Park' then 'Westbourne Park'&#xA;&#x9;when 'Canterbury Close' then 'Elizabeth East'&#xA;&#x9;when 'AnglicareSA Elizabeth East' then 'Elizabeth East'&#xA;&#x9;when 'Dutton Court' then 'Elizabeth Dutton Court'&#xA;&#x9;when 'Grandview Court' then 'Trott Park'&#xA;&#x9;when 'Ian George Court' then 'Brompton'&#xA;&#x9;when 'AnglicareSA Brompton' then 'Brompton'&#xA;&#x9;when 'St Laurences Court' then 'Grange'&#xA;&#x9;when 'AnglicareSA Grange' then 'Grange'&#xA;&#x9;when 'Allied Health Services, All Hallows' then 'Allied Health Services, Westbourne Park'&#xA;&#x9;when 'Allied Health Services, Westbourne Pk' then 'Allied Health Services, Westbourne Park'&#xA;&#x9;when 'Allied Health Services, St Laurences Court' then 'Allied Health Services, Grange'&#xA;&#x9;when 'St Mary''s with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;    when 'St Marys with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'OSH' then 'Outer Southern Hub'&#xA;&#x9;when 'Magdalene (St Lukes)' then 'Magdalene Centre - St Lukes'&#xA;&#x9;when 'OLD Extermal Location' then 'OLD External Location'&#xA;&#x9;else  Incident_Location&#xA;&#x9;end;&#xA;&#xA;&#xA;&#xA;update extract_riskman.vwReg_RMFeedback&#xA;set Incident_Location = &#xA;&#x9;case Incident_Location &#xA;&#x9;when 'All Hallows' then 'Westbourne Park'&#xA;&#x9;when 'AnglicareSA Westbourne Park' then 'Westbourne Park'&#xA;&#x9;when 'Canterbury Close' then 'Elizabeth East'&#xA;&#x9;when 'AnglicareSA Elizabeth East' then 'Elizabeth East'&#xA;&#x9;when 'Dutton Court' then 'Elizabeth Dutton Court'&#xA;&#x9;when 'Grandview Court' then 'Trott Park'&#xA;&#x9;when 'Ian George Court' then 'Brompton'&#xA;&#x9;when 'AnglicareSA Brompton' then 'Brompton'&#xA;&#x9;when 'St Laurences Court' then 'Grange'&#xA;&#x9;when 'AnglicareSA Grange' then 'Grange'&#xA;&#x9;when 'Allied Health Services, All Hallows' then 'Allied Health Services, Westbourne Park'&#xA;    when 'Allied Health Services, Westbourne Pk' then 'Allied Health Services, Westbourne Park'&#xA;&#x9;when 'Allied Health Services, St Laurences Court' then 'Allied Health Services, Grange'&#xA;&#x9;when 'St Mary''s with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'St Marys with Anglicare - Picket Fence' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'OSH' then 'Outer Southern Hub'&#xA;&#x9;when 'Magdalene (St Lukes)' then 'Magdalene Centre - St Lukes'&#xA;&#x9;when 'OLD Extermal Location' then 'OLD External Location'&#xA;&#x9;else  Incident_Location&#xA;&#x9;end&#xA;&#xA;&#xA;&#xA;&#xA;update extract_riskman.IncidentsForReview&#xA;set EmployeeSite = &#xA;&#x9;case EmployeeSite &#xA;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#xA;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  EmployeeSite&#xA;&#x9;end,&#xA;  site = &#xA;&#x9;case site &#xA;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  site&#xA;&#x9;end&#xA;&#xA;&#xA;&#xA;update extract_riskman.vwReg_RMFeedback&#xA;set EmployeeSite = &#xA;&#x9;case EmployeeSite &#xA;&#x9;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  EmployeeSite&#xA;&#x9;end,&#xA;  site = &#xA;&#x9;case site &#xA;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  site&#xA;&#x9;end&#xA;&#xA;&#xA;update extract_riskman.ANGCARE_IFR&#xA;set CustService = &#xA;&#x9;case CustService &#xA;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  CustService&#xA;&#x9;end&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container - Fact Tables\update location in fact tables"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{546EB60F-EDBC-4D3C-9F0C-EEA9A79D44D4}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="update location in fact tables"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{ABF0B8AA-626A-4E12-B1A3-D4CDDCF59D62}"
              SQLTask:SqlStatementSource="update  conform_riskman.incident_fact&#xA;set employee_site = &#xA;&#x9;case employee_site &#xA;    when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  employee_site&#xA;&#x9;end,&#xA;  cust_service = &#xA;&#x9;case cust_service &#xA;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  cust_service&#xA;&#x9;end,&#xA;&#xA;&#x9;service_service = &#xA;&#x9;case service_service &#xA;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  service_service&#xA;&#x9;end;&#xA;&#x9;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;update  conform_riskman.Feedback_Fact&#xA;set site = &#xA;&#x9;case site &#xA;&#x9;&#x9;when 'Children''s Disability Services – Daphne Street Chi' then 'Children''s Disability Services – Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services – Wanslea Childcare ELC' then 'Children''s Disability Services – Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services – Accommodation Servic' then  'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Services' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Disability Support Services – Accomodation Service' then  'Disability Support Services - Accommodation Services'&#xA;    when 'Disability Support Services - Accomodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'Disability Support Services – Accommodation Services' then 'Disability Support Services - Accommodation Services' --&#xA;&#x9;when 'St Mary''s with Anglicare, Picket Fence Community C' then 'St Mary''s with Anglicare'&#xA;    when 'St Mary''s with Anglicare, Picket Fence Community Centre, Project Centre and Community Garden' then 'St Mary''s with Anglicare'&#xA;&#x9;when 'Retail Op Shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)'&#xA;&#x9;when 'Northern Foster Carer Support' then 'Northern Foster Care Support'&#xA;&#x9;when 'Emergency Financial Assistance (EFA)' then 'Emergency &amp; Financial Assistance (EFA)'&#xA;&#x9;&#x9;when 'Central Foster Care Support - Learning and Develop' then 'Central Foster Care Support - Learning and Development'&#xA;&#x9;when 'Children''s Disability Services - Daphne Street Chi' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Daphne Street Child Care Centre' then 'Children''s Disability Services - Daphne Street Childcare'&#xA;&#x9;when 'Children''s Disability Services - Wanslea Childcare ELC' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Wanslea Child Care' then 'Children''s Disability Services - Wanslea Childcare'&#xA;&#x9;when 'Disability Support Services - Accommodation Servic' then 'Disability Support Services - Accommodation Services'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalen' then 'Retail Op Shops'&#xA;&#x9;when 'Retail Op shops (Peppertree Fashions, The Magdalene Centre and Cathedral Fashions)' then 'Retail Op Shops'&#xA;&#xA;&#x9;else  site&#xA;&#x9;end;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{0D523605-D072-42A6-A791-9D7C45043107}"
          DTS:From="Package\Sequence Container - Fact Tables\update incident_location"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{CD0FF97B-B7A4-4CEC-A5C2-E4C82AF86B49}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{F13C6FB9-D900-417B-8DB6-6DCD66A851EB}"
          DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{58B23EB5-2D19-421B-9C8C-5A91A3FA4A2F}"
          DTS:From="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{284501F9-0666-4DB8-9460-F998FFCF8C97}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{553F6AAA-8D02-477C-800A-E7B6C6247128}"
          DTS:From="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{A29A6D15-98AF-4463-9375-4E7C56DA49D1}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Sequence Container - Fact Tables\update location in fact tables"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 7]"
          DTS:CreationName=""
          DTS:DTSID="{B38C67D0-B4B2-4E31-8DD0-2B92A08534AB}"
          DTS:From="Package\Sequence Container - Fact Tables\update location in fact tables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 7"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 8]"
          DTS:CreationName=""
          DTS:DTSID="{A419AA98-D812-48E6-89D2-E30CA29C6938}"
          DTS:From="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 8"
          DTS:To="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{A0ECBAC7-A90A-4744-8A37-A361A0A735B8}"
      DTS:EventID="1701257339"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{E105E2D6-EB10-4C56-979E-6EDC66A769A5}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="128" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact"
          TopLeft="5.50000000000006,2165.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="382,329"
          Size="382,372"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT"
          TopLeft="19.0000000000002,1301.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="382,329"
          Size="382,372"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT"
          TopLeft="19.0000000000001,869.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT\Populate new data"
          TopLeft="29.75,158" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,200">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,56"
              Start="0,0"
              End="0,48.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,353"
          Size="409,396"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT"
          TopLeft="5.50000000000006,2597.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Finish info"
          TopLeft="30.75,221" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.PrecedenceConstraints[Constraint 2]"
          TopLeft="165.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,284"
          Size="409,327"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables"
          TopLeft="5.50000000000006,5.5" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident"
          TopLeft="5.50000000000009,437.5" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\Delete and Populate new data"
          TopLeft="29.75,158" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint]"
          TopLeft="165.25,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,101"
              Start="0,0"
              End="0,93.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,93.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,200">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,56"
              Start="0,0"
              End="0,48.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,353"
          Size="409,396"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact"
          TopLeft="10.5000000000001,3134" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT\Populate new data"
          TopLeft="29.75,158" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,200">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,56"
              Start="0,0"
              End="0,48.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,353"
          Size="409,396"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT"
          TopLeft="5.50000000000006,3590" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Delete Existing Data"
          TopLeft="31.75,91" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Finish info"
          TopLeft="32.75,256" />
        <NodeLayout
          Size="271,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\EST - Write Job Start info"
          TopLeft="30.75,15" />
        <NodeLayout
          Size="269,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT\Populate new data"
          TopLeft="29.75,156" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint]"
          TopLeft="166.75,57">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 1]"
          TopLeft="165.75,133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.PrecedenceConstraints[Constraint 2]"
          TopLeft="166.25,198">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,58"
              Start="0,0"
              End="0,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="409,329"
          Size="409,372"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT"
          TopLeft="5.50000000000026,1733.5" />
        <NodeLayout
          Size="382,42"
          Id="Package\Sequence Container - Fact Tables\update incident_location"
          TopLeft="26,360" />
        <NodeLayout
          Size="217,42"
          Id="Package\Sequence Container - Fact Tables\update location in fact tables"
          TopLeft="100,3038" />
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint]"
          TopLeft="213.5,402">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35.5"
              Start="0,0"
              End="0,28">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,8.1953125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 1]"
          TopLeft="210,809.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 2]"
          TopLeft="210,1241.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 3]"
          TopLeft="210,1673.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 4]"
          TopLeft="210,2105.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 5]"
          TopLeft="210,2537.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,20.4453125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 6]"
          TopLeft="209.25,2993.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,44.5"
              Start="0,0"
              End="0,37">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,12.6953125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 7]"
          TopLeft="211.75,3080">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,54"
              Start="0,0"
              End="0,46.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container - Fact Tables.PrecedenceConstraints[Constraint 8]"
          TopLeft="212.5,3530">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="470,4041"
          Size="470,4084"
          Id="Package\Sequence Container - Fact Tables"
          TopLeft="34.5,1" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\ContributingFactors_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_ACTION_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\INCIDENT_TYPE_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - FEEDBACK_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- keep all records and with bridge tables.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - INCIDENT_FACT -- Keep one record for one incident.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - pressure_injury_fact.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 - SKINTEAR_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <DtsEventHandler
    design-time-name="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="264,42"
          Id="Package\Sequence Container - Fact Tables\SD1 INCIDENT_HISTORY_FACT.EventHandlers[OnError]\Execute SQL Task - Catch Error Details"
          TopLeft="448,222" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>